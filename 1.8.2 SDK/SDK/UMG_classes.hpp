#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: UMG

#include "Basic.hpp"

#include "MovieScene_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "UMG_structs.hpp"
#include "Slate_structs.hpp"
#include "MovieSceneTracks_classes.hpp"
#include "SlateCore_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// Class UMG.Visual
// 0x0000 (0x0028 - 0x0028)
class UVisual : public UObject
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("Visual")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"Visual")
	}
	static class UVisual* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVisual>();
	}
};
DUMPER7_ASSERTS_UVisual;

// Class UMG.PanelSlot
// 0x0010 (0x0038 - 0x0028)
class UPanelSlot : public UVisual
{
public:
	class UPanelWidget*                           Parent;                                            // 0x0028(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidget*                                Content;                                           // 0x0030(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("PanelSlot")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"PanelSlot")
	}
	static class UPanelSlot* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPanelSlot>();
	}
};
DUMPER7_ASSERTS_UPanelSlot;

// Class UMG.GridSlot
// 0x0038 (0x0070 - 0x0038)
class UGridSlot final : public UPanelSlot
{
public:
	struct FMargin                                Padding;                                           // 0x0038(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	EHorizontalAlignment                          HorizontalAlignment;                               // 0x0048(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVerticalAlignment                            VerticalAlignment;                                 // 0x0049(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4A[0x2];                                       // 0x004A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Row;                                               // 0x004C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RowSpan;                                           // 0x0050(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Column;                                            // 0x0054(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ColumnSpan;                                        // 0x0058(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Layer;                                             // 0x005C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              Nudge;                                             // 0x0060(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_68[0x8];                                       // 0x0068(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetColumn(int32 InColumn);
	void SetColumnSpan(int32 InColumnSpan);
	void SetHorizontalAlignment(EHorizontalAlignment InHorizontalAlignment);
	void SetLayer(int32 InLayer);
	void SetPadding(const struct FMargin& InPadding);
	void SetRow(int32 InRow);
	void SetRowSpan(int32 InRowSpan);
	void SetVerticalAlignment(EVerticalAlignment InVerticalAlignment);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("GridSlot")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"GridSlot")
	}
	static class UGridSlot* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGridSlot>();
	}
};
DUMPER7_ASSERTS_UGridSlot;

// Class UMG.UniformGridSlot
// 0x0018 (0x0050 - 0x0038)
class UUniformGridSlot final : public UPanelSlot
{
public:
	EHorizontalAlignment                          HorizontalAlignment;                               // 0x0038(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVerticalAlignment                            VerticalAlignment;                                 // 0x0039(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3A[0x2];                                       // 0x003A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Row;                                               // 0x003C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Column;                                            // 0x0040(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0xC];                                       // 0x0044(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetColumn(int32 InColumn);
	void SetHorizontalAlignment(EHorizontalAlignment InHorizontalAlignment);
	void SetRow(int32 InRow);
	void SetVerticalAlignment(EVerticalAlignment InVerticalAlignment);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("UniformGridSlot")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"UniformGridSlot")
	}
	static class UUniformGridSlot* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUniformGridSlot>();
	}
};
DUMPER7_ASSERTS_UUniformGridSlot;

// Class UMG.Widget
// 0x00F0 (0x0118 - 0x0028)
class UWidget : public UVisual
{
public:
	bool                                          bIsVariable;                                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCreatedByConstructionScript;                      // 0x0029(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A[0x6];                                       // 0x002A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UPanelSlot*                             Slot;                                              // 0x0030(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsEnabled;                                        // 0x0038(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             bIsEnabledDelegate;                                // 0x0040(0x0010)(ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic)
	class FText                                   ToolTipText;                                       // 0x0050(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TDelegate<void()>                             ToolTipTextDelegate;                               // 0x0068(0x0010)(ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic)
	class UWidget*                                ToolTipWidget;                                     // 0x0078(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void()>                             ToolTipWidgetDelegate;                             // 0x0080(0x0010)(ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic)
	ESlateVisibility                              Visiblity;                                         // 0x0090(0x0001)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESlateVisibility                              Visibility;                                        // 0x0091(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_92[0x6];                                       // 0x0092(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             VisibilityDelegate;                                // 0x0098(0x0010)(ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         bOverride_Cursor : 1;                              // 0x00A8(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_A9[0x3];                                       // 0x00A9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	EMouseCursor                                  Cursor;                                            // 0x00AC(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsVolatile;                                       // 0x00AD(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_AE[0x2];                                       // 0x00AE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FWidgetTransform                       RenderTransform;                                   // 0x00B0(0x001C)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector2D                              RenderTransformPivot;                              // 0x00CC(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D4[0x4];                                       // 0x00D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidgetNavigation*                      Navigation;                                        // 0x00D8(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E0[0x28];                                      // 0x00E0(0x0028)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UPropertyBinding*>               NativeBindings;                                    // 0x0108(0x0010)(ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)

public:
	void ForceLayoutPrepass();
	void ForceVolatile(bool bForce);
	void InvalidateLayoutAndVolatility();
	void RemoveFromParent();
	void ResetCursor();
	void SetAllNavigationRules(EUINavigationRule Rule, class FName WidgetToFocus);
	void SetCursor(EMouseCursor InCursor);
	void SetIsEnabled(bool bInIsEnabled);
	void SetKeyboardFocus();
	void SetNavigationRule(EUINavigation Direction, EUINavigationRule Rule, class FName WidgetToFocus);
	void SetRenderAngle(float Angle);
	void SetRenderScale(const struct FVector2D& Scale);
	void SetRenderShear(const struct FVector2D& Shear);
	void SetRenderTransform(const struct FWidgetTransform& InTransform);
	void SetRenderTransformPivot(const struct FVector2D& Pivot);
	void SetRenderTranslation(const struct FVector2D& Translation);
	void SetToolTip(class UWidget* Widget);
	void SetToolTipText(const class FText& InToolTipText);
	void SetUserFocus(class APlayerController* PlayerController);
	void SetVisibility(ESlateVisibility InVisibility);

	const struct FGeometry GetCachedGeometry() const;
	struct FVector2D GetDesiredSize() const;
	bool GetIsEnabled() const;
	class APlayerController* GetOwningPlayer() const;
	class UPanelWidget* GetParent() const;
	ESlateVisibility GetVisibility() const;
	bool HasAnyUserFocus() const;
	bool HasFocusedDescendants() const;
	bool HasKeyboardFocus() const;
	bool HasMouseCapture() const;
	bool HasUserFocus(class APlayerController* PlayerController) const;
	bool HasUserFocusedDescendants(class APlayerController* PlayerController) const;
	bool IsHovered() const;
	bool IsVisible() const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("Widget")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"Widget")
	}
	static class UWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWidget>();
	}
};
DUMPER7_ASSERTS_UWidget;

// Class UMG.MovieSceneMarginTrack
// 0x0000 (0x00E0 - 0x00E0)
class UMovieSceneMarginTrack final : public UMovieScenePropertyTrack
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MovieSceneMarginTrack")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MovieSceneMarginTrack")
	}
	static class UMovieSceneMarginTrack* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneMarginTrack>();
	}
};
DUMPER7_ASSERTS_UMovieSceneMarginTrack;

// Class UMG.UserWidget
// 0x0118 (0x0230 - 0x0118)
class UUserWidget : public UWidget
{
public:
	uint8                                         Pad_118[0x8];                                      // 0x0118(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           ColorAndOpacity;                                   // 0x0120(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void()>                             ColorAndOpacityDelegate;                           // 0x0130(0x0010)(ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic)
	struct FSlateColor                            ForegroundColor;                                   // 0x0140(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TDelegate<void()>                             ForegroundColorDelegate;                           // 0x0168(0x0010)(ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic)
	struct FMargin                                Padding;                                           // 0x0178(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bSupportsKeyboardFocus;                            // 0x0188(0x0001)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsFocusable;                                      // 0x0189(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18A[0x6];                                      // 0x018A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UUMGSequencePlayer*>             ActiveSequencePlayers;                             // 0x0190(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	TArray<class UUMGSequencePlayer*>             StoppedSequencePlayers;                            // 0x01A0(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	bool                                          bStopAction;                                       // 0x01B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B1[0x3];                                      // 0x01B1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Priority;                                          // 0x01B4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FNamedSlotBinding>              NamedSlotBindings;                                 // 0x01B8(0x0010)(ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	class UWidgetTree*                            WidgetTree;                                        // 0x01C8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bCanEverTick : 1;                                  // 0x01D0(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bCanEverPaint : 1;                                 // 0x01D0(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         BitPad_1D0_2 : 1;                                  // 0x01D0(0x0001)(Fixing Bit-Field Size Between Bits [ Dumper-7 ])
	uint8                                         bCookedWidgetTree : 1;                             // 0x01D0(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_1D1[0x7];                                      // 0x01D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UInputComponent*                        InputComponent;                                    // 0x01D8(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, DuplicateTransient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1E0[0x50];                                     // 0x01E0(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool AddToPlayerScreen(int32 ZOrder);
	void AddToViewport(int32 ZOrder);
	void Construct();
	void Destruct();
	bool IsAnimationPlayingForward(const class UWidgetAnimation* InAnimation);
	void ListenForInputAction(class FName ActionName, EInputEvent EventType, bool bConsume, TDelegate<void()> Callback);
	struct FEventReply OnAnalogValueChanged(const struct FGeometry& MyGeometry, const struct FAnalogInputEvent& InAnalogInputEvent);
	void OnAnimationFinished(const class UWidgetAnimation* Animation);
	void OnAnimationStarted(const class UWidgetAnimation* Animation);
	struct FEventReply OnControllerAnalogValueChanged(const struct FGeometry& MyGeometry, const struct FControllerEvent& ControllerEvent);
	struct FEventReply OnControllerButtonPressed(const struct FGeometry& MyGeometry, const struct FControllerEvent& ControllerEvent);
	struct FEventReply OnControllerButtonReleased(const struct FGeometry& MyGeometry, const struct FControllerEvent& ControllerEvent);
	void OnDragCancelled(const struct FPointerEvent& PointerEvent, class UDragDropOperation* Operation);
	void OnDragDetected(const struct FGeometry& MyGeometry, const struct FPointerEvent& PointerEvent, class UDragDropOperation** Operation);
	void OnDragEnter(const struct FGeometry& MyGeometry, const struct FPointerEvent& PointerEvent, class UDragDropOperation* Operation);
	void OnDragLeave(const struct FPointerEvent& PointerEvent, class UDragDropOperation* Operation);
	bool OnDragOver(const struct FGeometry& MyGeometry, const struct FPointerEvent& PointerEvent, class UDragDropOperation* Operation);
	bool OnDrop(const struct FGeometry& MyGeometry, const struct FPointerEvent& PointerEvent, class UDragDropOperation* Operation);
	void OnFocusLost(const struct FFocusEvent& InFocusEvent);
	struct FEventReply OnFocusReceived(const struct FGeometry& MyGeometry, const struct FFocusEvent& InFocusEvent);
	struct FEventReply OnKeyChar(const struct FGeometry& MyGeometry, const struct FCharacterEvent& InCharacterEvent);
	struct FEventReply OnKeyDown(const struct FGeometry& MyGeometry, const struct FKeyEvent& InKeyEvent);
	struct FEventReply OnKeyUp(const struct FGeometry& MyGeometry, const struct FKeyEvent& InKeyEvent);
	struct FEventReply OnMotionDetected(const struct FGeometry& MyGeometry, const struct FMotionEvent& InMotionEvent);
	struct FEventReply OnMouseButtonDoubleClick(const struct FGeometry& InMyGeometry, const struct FPointerEvent& InMouseEvent);
	struct FEventReply OnMouseButtonDown(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent);
	struct FEventReply OnMouseButtonUp(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent);
	void OnMouseEnter(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent);
	void OnMouseLeave(const struct FPointerEvent& MouseEvent);
	struct FEventReply OnMouseMove(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent);
	struct FEventReply OnMouseWheel(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent);
	struct FEventReply OnPreviewKeyDown(const struct FGeometry& MyGeometry, const struct FKeyEvent& InKeyEvent);
	struct FEventReply OnPreviewMouseButtonDown(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent);
	struct FEventReply OnTouchEnded(const struct FGeometry& MyGeometry, const struct FPointerEvent& InTouchEvent);
	struct FEventReply OnTouchGesture(const struct FGeometry& MyGeometry, const struct FPointerEvent& GestureEvent);
	struct FEventReply OnTouchMoved(const struct FGeometry& MyGeometry, const struct FPointerEvent& InTouchEvent);
	struct FEventReply OnTouchStarted(const struct FGeometry& MyGeometry, const struct FPointerEvent& InTouchEvent);
	float PauseAnimation(const class UWidgetAnimation* InAnimation);
	void PlayAnimation(class UWidgetAnimation* InAnimation, float StartAtTime, int32 NumLoopsToPlay, EUMGSequencePlayMode PlayMode, float PlaybackSpeed);
	void PlayAnimationTo(class UWidgetAnimation* InAnimation, float StartAtTime, float EndAtTime, int32 NumLoopsToPlay, EUMGSequencePlayMode PlayMode, float PlaybackSpeed);
	void PlaySound(class USoundBase* SoundToPlay);
	void PreConstruct(bool IsDesignTime);
	void RegisterInputComponent();
	void RemoveFromViewport();
	void ReverseAnimation(const class UWidgetAnimation* InAnimation);
	void SetAlignmentInViewport(const struct FVector2D& Alignment);
	void SetAnchorsInViewport(const struct FAnchors& Anchors);
	void SetColorAndOpacity(const struct FLinearColor& InColorAndOpacity);
	void SetDesiredSizeInViewport(const struct FVector2D& Size);
	void SetForegroundColor(const struct FSlateColor& InForegroundColor);
	void SetInputActionBlocking(bool bShouldBlock);
	void SetInputActionPriority(int32 NewPriority);
	void SetNumLoopsToPlay(const class UWidgetAnimation* InAnimation, int32 NumLoopsToPlay);
	void SetOwningLocalPlayer(class ULocalPlayer* LocalPlayer);
	void SetOwningPlayer(class APlayerController* LocalPlayerController);
	void SetPadding(const struct FMargin& InPadding);
	void SetPlaybackSpeed(const class UWidgetAnimation* InAnimation, float PlaybackSpeed);
	void SetPositionInViewport(const struct FVector2D& Position, bool bRemoveDPIScale);
	void StopAnimation(const class UWidgetAnimation* InAnimation);
	void StopListeningForAllInputActions();
	void StopListeningForInputAction(class FName ActionName, EInputEvent EventType);
	void Tick(const struct FGeometry& MyGeometry, float InDeltaTime);
	void UnregisterInputComponent();

	struct FVector2D GetAlignmentInViewport() const;
	struct FAnchors GetAnchorsInViewport() const;
	float GetAnimationCurrentTime(const class UWidgetAnimation* InAnimation) const;
	bool GetIsVisible() const;
	class ULocalPlayer* GetOwningLocalPlayer() const;
	class APawn* GetOwningPlayerPawn() const;
	bool IsAnimationPlaying(const class UWidgetAnimation* InAnimation) const;
	bool IsAnyAnimationPlaying() const;
	bool IsInteractable() const;
	bool IsInViewport() const;
	bool IsListeningForInputAction(class FName ActionName) const;
	bool IsPlayingAnimation() const;
	void OnPaint(struct FPaintContext& Context) const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("UserWidget")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"UserWidget")
	}
	static class UUserWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUserWidget>();
	}
};
DUMPER7_ASSERTS_UUserWidget;

// Class UMG.AsyncTaskDownloadImage
// 0x0020 (0x0048 - 0x0028)
class UAsyncTaskDownloadImage final : public UBlueprintAsyncActionBase
{
public:
	UMulticastDelegateProperty_                   OnSuccess;                                         // 0x0028(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnFail;                                            // 0x0038(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)

public:
	static class UAsyncTaskDownloadImage* DownloadImage(const class FString& URL);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("AsyncTaskDownloadImage")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"AsyncTaskDownloadImage")
	}
	static class UAsyncTaskDownloadImage* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAsyncTaskDownloadImage>();
	}
};
DUMPER7_ASSERTS_UAsyncTaskDownloadImage;

// Class UMG.DragDropOperation
// 0x0060 (0x0088 - 0x0028)
class UDragDropOperation : public UObject
{
public:
	class FString                                 Tag;                                               // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                Payload;                                           // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidget*                                DefaultDragVisual;                                 // 0x0040(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDragPivot                                    Pivot;                                             // 0x0048(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x3];                                       // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              Offset;                                            // 0x004C(0x0008)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, AdvancedDisplay, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	UMulticastDelegateProperty_                   OnDrop;                                            // 0x0058(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnDragCancelled;                                   // 0x0068(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnDragged;                                         // 0x0078(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)

public:
	void DragCancelled(const struct FPointerEvent& PointerEvent);
	void Dragged(const struct FPointerEvent& PointerEvent);
	void Drop(const struct FPointerEvent& PointerEvent);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("DragDropOperation")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"DragDropOperation")
	}
	static class UDragDropOperation* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDragDropOperation>();
	}
};
DUMPER7_ASSERTS_UDragDropOperation;

// Class UMG.MovieScene2DTransformSection
// 0x0320 (0x03F0 - 0x00D0)
class UMovieScene2DTransformSection final : public UMovieSceneSection
{
public:
	uint8                                         Pad_D0[0x8];                                       // 0x00D0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRichCurve                             Translation[0x2];                                  // 0x00D8(0x0070)(NativeAccessSpecifierPrivate)
	struct FRichCurve                             Rotation;                                          // 0x01B8(0x0070)(NativeAccessSpecifierPrivate)
	struct FRichCurve                             Scale[0x2];                                        // 0x0228(0x0070)(NativeAccessSpecifierPrivate)
	struct FRichCurve                             Shear[0x2];                                        // 0x0308(0x0070)(NativeAccessSpecifierPrivate)
	uint8                                         Pad_3E8[0x8];                                      // 0x03E8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MovieScene2DTransformSection")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MovieScene2DTransformSection")
	}
	static class UMovieScene2DTransformSection* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieScene2DTransformSection>();
	}
};
DUMPER7_ASSERTS_UMovieScene2DTransformSection;

// Class UMG.MovieScene2DTransformTrack
// 0x0000 (0x00E0 - 0x00E0)
class UMovieScene2DTransformTrack final : public UMovieScenePropertyTrack
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MovieScene2DTransformTrack")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MovieScene2DTransformTrack")
	}
	static class UMovieScene2DTransformTrack* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieScene2DTransformTrack>();
	}
};
DUMPER7_ASSERTS_UMovieScene2DTransformTrack;

// Class UMG.MovieSceneMarginSection
// 0x01D0 (0x02A0 - 0x00D0)
class UMovieSceneMarginSection final : public UMovieSceneSection
{
public:
	uint8                                         Pad_D0[0x8];                                       // 0x00D0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRichCurve                             TopCurve;                                          // 0x00D8(0x0070)(NativeAccessSpecifierPrivate)
	struct FRichCurve                             LeftCurve;                                         // 0x0148(0x0070)(NativeAccessSpecifierPrivate)
	struct FRichCurve                             RightCurve;                                        // 0x01B8(0x0070)(NativeAccessSpecifierPrivate)
	struct FRichCurve                             BottomCurve;                                       // 0x0228(0x0070)(NativeAccessSpecifierPrivate)
	uint8                                         Pad_298[0x8];                                      // 0x0298(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MovieSceneMarginSection")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MovieSceneMarginSection")
	}
	static class UMovieSceneMarginSection* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneMarginSection>();
	}
};
DUMPER7_ASSERTS_UMovieSceneMarginSection;

// Class UMG.MovieSceneWidgetMaterialTrack
// 0x0018 (0x00E0 - 0x00C8)
class UMovieSceneWidgetMaterialTrack final : public UMovieSceneMaterialTrack
{
public:
	TArray<class FName>                           BrushPropertyNamePath;                             // 0x00C8(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	class FName                                   TrackName;                                         // 0x00D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MovieSceneWidgetMaterialTrack")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MovieSceneWidgetMaterialTrack")
	}
	static class UMovieSceneWidgetMaterialTrack* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneWidgetMaterialTrack>();
	}
};
DUMPER7_ASSERTS_UMovieSceneWidgetMaterialTrack;

// Class UMG.NamedSlotInterface
// 0x0000 (0x0000 - 0x0000)
class INamedSlotInterface final
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NamedSlotInterface")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NamedSlotInterface")
	}
	static class INamedSlotInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<INamedSlotInterface>();
	}

	class UObject* AsUObject()
	{
		return reinterpret_cast<UObject*>(this);
	}
	const class UObject* AsUObject() const
	{
		return reinterpret_cast<const UObject*>(this);
	}
};
DUMPER7_ASSERTS_INamedSlotInterface;

// Class UMG.PropertyBinding
// 0x0020 (0x0048 - 0x0028)
class UPropertyBinding : public UObject
{
public:
	TWeakObjectPtr<class UObject>                 SourceObject;                                      // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDynamicPropertyPath                   SourcePath;                                        // 0x0030(0x0010)(NativeAccessSpecifierPublic)
	class FName                                   DestinationProperty;                               // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("PropertyBinding")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"PropertyBinding")
	}
	static class UPropertyBinding* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPropertyBinding>();
	}
};
DUMPER7_ASSERTS_UPropertyBinding;

// Class UMG.BoolBinding
// 0x0000 (0x0048 - 0x0048)
class UBoolBinding final : public UPropertyBinding
{
public:
	bool GetValue() const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("BoolBinding")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"BoolBinding")
	}
	static class UBoolBinding* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBoolBinding>();
	}
};
DUMPER7_ASSERTS_UBoolBinding;

// Class UMG.BrushBinding
// 0x0008 (0x0050 - 0x0048)
class UBrushBinding final : public UPropertyBinding
{
public:
	uint8                                         Pad_48[0x8];                                       // 0x0048(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	struct FSlateBrush GetValue() const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("BrushBinding")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"BrushBinding")
	}
	static class UBrushBinding* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBrushBinding>();
	}
};
DUMPER7_ASSERTS_UBrushBinding;

// Class UMG.CheckedStateBinding
// 0x0008 (0x0050 - 0x0048)
class UCheckedStateBinding final : public UPropertyBinding
{
public:
	uint8                                         Pad_48[0x8];                                       // 0x0048(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	ECheckBoxState GetValue() const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("CheckedStateBinding")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"CheckedStateBinding")
	}
	static class UCheckedStateBinding* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCheckedStateBinding>();
	}
};
DUMPER7_ASSERTS_UCheckedStateBinding;

// Class UMG.ColorBinding
// 0x0008 (0x0050 - 0x0048)
class UColorBinding final : public UPropertyBinding
{
public:
	uint8                                         Pad_48[0x8];                                       // 0x0048(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	struct FLinearColor GetLinearValue() const;
	struct FSlateColor GetSlateValue() const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ColorBinding")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ColorBinding")
	}
	static class UColorBinding* GetDefaultObj()
	{
		return GetDefaultObjImpl<UColorBinding>();
	}
};
DUMPER7_ASSERTS_UColorBinding;

// Class UMG.FloatBinding
// 0x0000 (0x0048 - 0x0048)
class UFloatBinding final : public UPropertyBinding
{
public:
	float GetValue() const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("FloatBinding")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"FloatBinding")
	}
	static class UFloatBinding* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFloatBinding>();
	}
};
DUMPER7_ASSERTS_UFloatBinding;

// Class UMG.Int32Binding
// 0x0000 (0x0048 - 0x0048)
class UInt32Binding final : public UPropertyBinding
{
public:
	int32 GetValue() const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("Int32Binding")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"Int32Binding")
	}
	static class UInt32Binding* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInt32Binding>();
	}
};
DUMPER7_ASSERTS_UInt32Binding;

// Class UMG.MouseCursorBinding
// 0x0000 (0x0048 - 0x0048)
class UMouseCursorBinding final : public UPropertyBinding
{
public:
	EMouseCursor GetValue() const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MouseCursorBinding")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MouseCursorBinding")
	}
	static class UMouseCursorBinding* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMouseCursorBinding>();
	}
};
DUMPER7_ASSERTS_UMouseCursorBinding;

// Class UMG.TextBinding
// 0x0008 (0x0050 - 0x0048)
class UTextBinding final : public UPropertyBinding
{
public:
	uint8                                         Pad_48[0x8];                                       // 0x0048(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class FString GetStringValue() const;
	class FText GetTextValue() const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("TextBinding")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"TextBinding")
	}
	static class UTextBinding* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTextBinding>();
	}
};
DUMPER7_ASSERTS_UTextBinding;

// Class UMG.VisibilityBinding
// 0x0000 (0x0048 - 0x0048)
class UVisibilityBinding final : public UPropertyBinding
{
public:
	ESlateVisibility GetValue() const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("VisibilityBinding")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"VisibilityBinding")
	}
	static class UVisibilityBinding* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVisibilityBinding>();
	}
};
DUMPER7_ASSERTS_UVisibilityBinding;

// Class UMG.WidgetBinding
// 0x0000 (0x0048 - 0x0048)
class UWidgetBinding final : public UPropertyBinding
{
public:
	class UWidget* GetValue() const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("WidgetBinding")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"WidgetBinding")
	}
	static class UWidgetBinding* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWidgetBinding>();
	}
};
DUMPER7_ASSERTS_UWidgetBinding;

// Class UMG.RichTextBlockDecorator
// 0x0008 (0x0030 - 0x0028)
class URichTextBlockDecorator final : public UObject
{
public:
	bool                                          bReveal;                                           // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         RevealedIndex;                                     // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("RichTextBlockDecorator")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"RichTextBlockDecorator")
	}
	static class URichTextBlockDecorator* GetDefaultObj()
	{
		return GetDefaultObjImpl<URichTextBlockDecorator>();
	}
};
DUMPER7_ASSERTS_URichTextBlockDecorator;

// Class UMG.SlateBlueprintLibrary
// 0x0000 (0x0028 - 0x0028)
class USlateBlueprintLibrary final : public UBlueprintFunctionLibrary
{
public:
	static struct FVector2D AbsoluteToLocal(const struct FGeometry& Geometry, const struct FVector2D& AbsoluteCoordinate);
	static void AbsoluteToViewport(class UObject* WorldContextObject, const struct FVector2D& AbsoluteDesktopCoordinate, struct FVector2D* PixelPosition, struct FVector2D* ViewportPosition);
	static bool EqualEqual_SlateBrush(const struct FSlateBrush& A, const struct FSlateBrush& B);
	static struct FVector2D GetLocalSize(const struct FGeometry& Geometry);
	static bool IsUnderLocation(const struct FGeometry& Geometry, const struct FVector2D& AbsoluteCoordinate);
	static struct FVector2D LocalToAbsolute(const struct FGeometry& Geometry, const struct FVector2D& LocalCoordinate);
	static void LocalToViewport(class UObject* WorldContextObject, const struct FGeometry& Geometry, const struct FVector2D& LocalCoordinate, struct FVector2D* PixelPosition, struct FVector2D* ViewportPosition);
	static void ScreenToViewport(class UObject* WorldContextObject, const struct FVector2D& ScreenPosition, struct FVector2D* ViewportPosition);
	static void ScreenToWidgetAbsolute(class UObject* WorldContextObject, const struct FVector2D& ScreenPosition, struct FVector2D* AbsoluteCoordinate);
	static void ScreenToWidgetLocal(class UObject* WorldContextObject, const struct FGeometry& Geometry, const struct FVector2D& ScreenPosition, struct FVector2D* LocalCoordinate);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("SlateBlueprintLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"SlateBlueprintLibrary")
	}
	static class USlateBlueprintLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<USlateBlueprintLibrary>();
	}
};
DUMPER7_ASSERTS_USlateBlueprintLibrary;

// Class UMG.SlateDataSheet
// 0x0408 (0x0430 - 0x0028)
class USlateDataSheet final : public UObject
{
public:
	class UTexture2D*                             DataTexture;                                       // 0x0028(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_30[0x400];                                     // 0x0030(0x0400)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("SlateDataSheet")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"SlateDataSheet")
	}
	static class USlateDataSheet* GetDefaultObj()
	{
		return GetDefaultObjImpl<USlateDataSheet>();
	}
};
DUMPER7_ASSERTS_USlateDataSheet;

// Class UMG.SlateVectorArtData
// 0x0038 (0x0060 - 0x0028)
class USlateVectorArtData final : public UObject
{
public:
	TArray<struct FSlateMeshVertex>               VertexData;                                        // 0x0028(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<uint32>                                IndexData;                                         // 0x0038(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	class UMaterialInterface*                     Material;                                          // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FVector2D                              ExtentMin;                                         // 0x0050(0x0008)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FVector2D                              ExtentMax;                                         // 0x0058(0x0008)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("SlateVectorArtData")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"SlateVectorArtData")
	}
	static class USlateVectorArtData* GetDefaultObj()
	{
		return GetDefaultObjImpl<USlateVectorArtData>();
	}
};
DUMPER7_ASSERTS_USlateVectorArtData;

// Class UMG.WidgetBlueprintGeneratedClass
// 0x0068 (0x0398 - 0x0330)
class UWidgetBlueprintGeneratedClass final : public UBlueprintGeneratedClass
{
public:
	class UWidgetTree*                            WidgetTree;                                        // 0x0330(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bAllowTemplate : 1;                                // 0x0338(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bValidTemplate : 1;                                // 0x0338(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate))
	uint8                                         bTemplateInitialized : 1;                          // 0x0338(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate))
	uint8                                         bCookedTemplate : 1;                               // 0x0338(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate))
	uint8                                         Pad_339[0x7];                                      // 0x0339(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FDelegateRuntimeBinding>        Bindings;                                          // 0x0340(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class UWidgetAnimation*>               Animations;                                        // 0x0350(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TArray<class FName>                           NamedSlots;                                        // 0x0360(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UUserWidget>             TemplateAsset;                                     // 0x0370(0x0020)(ExportObject, InstancedReference, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UUserWidget*                            Template;                                          // 0x0390(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("WidgetBlueprintGeneratedClass")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"WidgetBlueprintGeneratedClass")
	}
	static class UWidgetBlueprintGeneratedClass* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWidgetBlueprintGeneratedClass>();
	}
};
DUMPER7_ASSERTS_UWidgetBlueprintGeneratedClass;

// Class UMG.UMGSequencePlayer
// 0x0638 (0x0660 - 0x0028)
class UUMGSequencePlayer final : public UObject
{
public:
	uint8                                         Pad_28[0x358];                                     // 0x0028(0x0358)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidgetAnimation*                       Animation;                                         // 0x0380(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_388[0x2D8];                                    // 0x0388(0x02D8)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("UMGSequencePlayer")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"UMGSequencePlayer")
	}
	static class UUMGSequencePlayer* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUMGSequencePlayer>();
	}
};
DUMPER7_ASSERTS_UUMGSequencePlayer;

// Class UMG.BackgroundBlurSlot
// 0x0028 (0x0060 - 0x0038)
class UBackgroundBlurSlot final : public UPanelSlot
{
public:
	struct FMargin                                Padding;                                           // 0x0038(0x0010)(Edit, NoDestructor, Protected, NativeAccessSpecifierProtected)
	EHorizontalAlignment                          HorizontalAlignment;                               // 0x0048(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EVerticalAlignment                            VerticalAlignment;                                 // 0x0049(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_4A[0x16];                                      // 0x004A(0x0016)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetHorizontalAlignment(EHorizontalAlignment InHorizontalAlignment);
	void SetPadding(const struct FMargin& InPadding);
	void SetVerticalAlignment(EVerticalAlignment InVerticalAlignment);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("BackgroundBlurSlot")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"BackgroundBlurSlot")
	}
	static class UBackgroundBlurSlot* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBackgroundBlurSlot>();
	}
};
DUMPER7_ASSERTS_UBackgroundBlurSlot;

// Class UMG.BorderSlot
// 0x0028 (0x0060 - 0x0038)
class UBorderSlot final : public UPanelSlot
{
public:
	struct FMargin                                Padding;                                           // 0x0038(0x0010)(Edit, NoDestructor, Protected, NativeAccessSpecifierProtected)
	EHorizontalAlignment                          HorizontalAlignment;                               // 0x0048(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EVerticalAlignment                            VerticalAlignment;                                 // 0x0049(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_4A[0x16];                                      // 0x004A(0x0016)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetHorizontalAlignment(EHorizontalAlignment InHorizontalAlignment);
	void SetPadding(const struct FMargin& InPadding);
	void SetVerticalAlignment(EVerticalAlignment InVerticalAlignment);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("BorderSlot")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"BorderSlot")
	}
	static class UBorderSlot* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBorderSlot>();
	}
};
DUMPER7_ASSERTS_UBorderSlot;

// Class UMG.ButtonSlot
// 0x0028 (0x0060 - 0x0038)
class UButtonSlot final : public UPanelSlot
{
public:
	struct FMargin                                Padding;                                           // 0x0038(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	EHorizontalAlignment                          HorizontalAlignment;                               // 0x0048(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVerticalAlignment                            VerticalAlignment;                                 // 0x0049(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4A[0x16];                                      // 0x004A(0x0016)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetHorizontalAlignment(EHorizontalAlignment InHorizontalAlignment);
	void SetPadding(const struct FMargin& InPadding);
	void SetVerticalAlignment(EVerticalAlignment InVerticalAlignment);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ButtonSlot")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ButtonSlot")
	}
	static class UButtonSlot* GetDefaultObj()
	{
		return GetDefaultObjImpl<UButtonSlot>();
	}
};
DUMPER7_ASSERTS_UButtonSlot;

// Class UMG.CanvasPanelSlot
// 0x0038 (0x0070 - 0x0038)
class UCanvasPanelSlot final : public UPanelSlot
{
public:
	struct FAnchorData                            LayoutData;                                        // 0x0038(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bAutoSize;                                         // 0x0060(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x3];                                       // 0x0061(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ZOrder;                                            // 0x0064(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_68[0x8];                                       // 0x0068(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetAlignment(const struct FVector2D& InAlignment);
	void SetAnchors(const struct FAnchors& InAnchors);
	void SetAutoSize(bool InbAutoSize);
	void SetLayout(const struct FAnchorData& InLayoutData);
	void SetMaximum(const struct FVector2D& InMaximumAnchors);
	void SetMinimum(const struct FVector2D& InMinimumAnchors);
	void SetOffsets(const struct FMargin& InOffset);
	void SetPosition(const struct FVector2D& InPosition);
	void SetSize(const struct FVector2D& InSize);
	void SetZOrder(int32 InZOrder);

	struct FVector2D GetAlignment() const;
	struct FAnchors GetAnchors() const;
	bool GetAutoSize() const;
	struct FAnchorData GetLayout() const;
	struct FMargin GetOffsets() const;
	struct FVector2D GetPosition() const;
	struct FVector2D GetSize() const;
	int32 GetZOrder() const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("CanvasPanelSlot")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"CanvasPanelSlot")
	}
	static class UCanvasPanelSlot* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCanvasPanelSlot>();
	}
};
DUMPER7_ASSERTS_UCanvasPanelSlot;

// Class UMG.HorizontalBoxSlot
// 0x0028 (0x0060 - 0x0038)
class UHorizontalBoxSlot final : public UPanelSlot
{
public:
	struct FMargin                                Padding;                                           // 0x0038(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FSlateChildSize                        Size;                                              // 0x0048(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	EHorizontalAlignment                          HorizontalAlignment;                               // 0x0050(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVerticalAlignment                            VerticalAlignment;                                 // 0x0051(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_52[0xE];                                       // 0x0052(0x000E)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetHorizontalAlignment(EHorizontalAlignment InHorizontalAlignment);
	void SetPadding(const struct FMargin& InPadding);
	void SetSize(const struct FSlateChildSize& InSize);
	void SetVerticalAlignment(EVerticalAlignment InVerticalAlignment);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("HorizontalBoxSlot")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"HorizontalBoxSlot")
	}
	static class UHorizontalBoxSlot* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHorizontalBoxSlot>();
	}
};
DUMPER7_ASSERTS_UHorizontalBoxSlot;

// Class UMG.OverlaySlot
// 0x0020 (0x0058 - 0x0038)
class UOverlaySlot final : public UPanelSlot
{
public:
	struct FMargin                                Padding;                                           // 0x0038(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	EHorizontalAlignment                          HorizontalAlignment;                               // 0x0048(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVerticalAlignment                            VerticalAlignment;                                 // 0x0049(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4A[0xE];                                       // 0x004A(0x000E)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetHorizontalAlignment(EHorizontalAlignment InHorizontalAlignment);
	void SetPadding(const struct FMargin& InPadding);
	void SetVerticalAlignment(EVerticalAlignment InVerticalAlignment);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("OverlaySlot")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"OverlaySlot")
	}
	static class UOverlaySlot* GetDefaultObj()
	{
		return GetDefaultObjImpl<UOverlaySlot>();
	}
};
DUMPER7_ASSERTS_UOverlaySlot;

// Class UMG.SafeZoneSlot
// 0x0028 (0x0060 - 0x0038)
class USafeZoneSlot final : public UPanelSlot
{
public:
	bool                                          bIsTitleSafe;                                      // 0x0038(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMargin                                SafeAreaScale;                                     // 0x003C(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	EHorizontalAlignment                          HAlign;                                            // 0x004C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVerticalAlignment                            VAlign;                                            // 0x004D(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4E[0x2];                                       // 0x004E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMargin                                Padding;                                           // 0x0050(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("SafeZoneSlot")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"SafeZoneSlot")
	}
	static class USafeZoneSlot* GetDefaultObj()
	{
		return GetDefaultObjImpl<USafeZoneSlot>();
	}
};
DUMPER7_ASSERTS_USafeZoneSlot;

// Class UMG.ScaleBoxSlot
// 0x0028 (0x0060 - 0x0038)
class UScaleBoxSlot final : public UPanelSlot
{
public:
	struct FMargin                                Padding;                                           // 0x0038(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	EHorizontalAlignment                          HorizontalAlignment;                               // 0x0048(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVerticalAlignment                            VerticalAlignment;                                 // 0x0049(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4A[0x16];                                      // 0x004A(0x0016)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetHorizontalAlignment(EHorizontalAlignment InHorizontalAlignment);
	void SetPadding(const struct FMargin& InPadding);
	void SetVerticalAlignment(EVerticalAlignment InVerticalAlignment);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ScaleBoxSlot")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ScaleBoxSlot")
	}
	static class UScaleBoxSlot* GetDefaultObj()
	{
		return GetDefaultObjImpl<UScaleBoxSlot>();
	}
};
DUMPER7_ASSERTS_UScaleBoxSlot;

// Class UMG.ScrollBoxSlot
// 0x0020 (0x0058 - 0x0038)
class UScrollBoxSlot final : public UPanelSlot
{
public:
	struct FMargin                                Padding;                                           // 0x0038(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	EHorizontalAlignment                          HorizontalAlignment;                               // 0x0048(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0xF];                                       // 0x0049(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetHorizontalAlignment(EHorizontalAlignment InHorizontalAlignment);
	void SetPadding(const struct FMargin& InPadding);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ScrollBoxSlot")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ScrollBoxSlot")
	}
	static class UScrollBoxSlot* GetDefaultObj()
	{
		return GetDefaultObjImpl<UScrollBoxSlot>();
	}
};
DUMPER7_ASSERTS_UScrollBoxSlot;

// Class UMG.SizeBoxSlot
// 0x0028 (0x0060 - 0x0038)
class USizeBoxSlot final : public UPanelSlot
{
public:
	struct FMargin                                Padding;                                           // 0x0038(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	EHorizontalAlignment                          HorizontalAlignment;                               // 0x0048(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVerticalAlignment                            VerticalAlignment;                                 // 0x0049(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4A[0x16];                                      // 0x004A(0x0016)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetHorizontalAlignment(EHorizontalAlignment InHorizontalAlignment);
	void SetPadding(const struct FMargin& InPadding);
	void SetVerticalAlignment(EVerticalAlignment InVerticalAlignment);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("SizeBoxSlot")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"SizeBoxSlot")
	}
	static class USizeBoxSlot* GetDefaultObj()
	{
		return GetDefaultObjImpl<USizeBoxSlot>();
	}
};
DUMPER7_ASSERTS_USizeBoxSlot;

// Class UMG.VerticalBoxSlot
// 0x0028 (0x0060 - 0x0038)
class UVerticalBoxSlot final : public UPanelSlot
{
public:
	struct FMargin                                Padding;                                           // 0x0038(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FSlateChildSize                        Size;                                              // 0x0048(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	EHorizontalAlignment                          HorizontalAlignment;                               // 0x0050(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVerticalAlignment                            VerticalAlignment;                                 // 0x0051(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_52[0xE];                                       // 0x0052(0x000E)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetHorizontalAlignment(EHorizontalAlignment InHorizontalAlignment);
	void SetPadding(const struct FMargin& InPadding);
	void SetSize(const struct FSlateChildSize& InSize);
	void SetVerticalAlignment(EVerticalAlignment InVerticalAlignment);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("VerticalBoxSlot")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"VerticalBoxSlot")
	}
	static class UVerticalBoxSlot* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVerticalBoxSlot>();
	}
};
DUMPER7_ASSERTS_UVerticalBoxSlot;

// Class UMG.WidgetSwitcherSlot
// 0x0020 (0x0058 - 0x0038)
class UWidgetSwitcherSlot final : public UPanelSlot
{
public:
	struct FMargin                                Padding;                                           // 0x0038(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	EHorizontalAlignment                          HorizontalAlignment;                               // 0x0048(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVerticalAlignment                            VerticalAlignment;                                 // 0x0049(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4A[0xE];                                       // 0x004A(0x000E)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetHorizontalAlignment(EHorizontalAlignment InHorizontalAlignment);
	void SetPadding(const struct FMargin& InPadding);
	void SetVerticalAlignment(EVerticalAlignment InVerticalAlignment);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("WidgetSwitcherSlot")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"WidgetSwitcherSlot")
	}
	static class UWidgetSwitcherSlot* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWidgetSwitcherSlot>();
	}
};
DUMPER7_ASSERTS_UWidgetSwitcherSlot;

// Class UMG.WidgetLayoutLibrary
// 0x0000 (0x0028 - 0x0028)
class UWidgetLayoutLibrary final : public UBlueprintFunctionLibrary
{
public:
	static bool GetMousePositionScaledByDPI(class APlayerController* Player, float* LocationX, float* LocationY);
	static float GetViewportScale(class UObject* WorldContextObject);
	static struct FVector2D GetViewportSize(class UObject* WorldContextObject);
	static bool ProjectWorldLocationToWidgetPosition(class APlayerController* PlayerController, const struct FVector& WorldLocation, struct FVector2D* ScreenPosition);
	static void RemoveAllWidgets(class UObject* WorldContextObject);
	static class UBorderSlot* SlotAsBorderSlot(class UWidget* Widget);
	static class UCanvasPanelSlot* SlotAsCanvasSlot(class UWidget* Widget);
	static class UGridSlot* SlotAsGridSlot(class UWidget* Widget);
	static class UHorizontalBoxSlot* SlotAsHorizontalBoxSlot(class UWidget* Widget);
	static class UOverlaySlot* SlotAsOverlaySlot(class UWidget* Widget);
	static class UUniformGridSlot* SlotAsUniformGridSlot(class UWidget* Widget);
	static class UVerticalBoxSlot* SlotAsVerticalBoxSlot(class UWidget* Widget);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("WidgetLayoutLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"WidgetLayoutLibrary")
	}
	static class UWidgetLayoutLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWidgetLayoutLibrary>();
	}
};
DUMPER7_ASSERTS_UWidgetLayoutLibrary;

// Class UMG.PanelWidget
// 0x0018 (0x0130 - 0x0118)
class UPanelWidget : public UWidget
{
public:
	TArray<class UPanelSlot*>                     Slots;                                             // 0x0118(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_128[0x8];                                      // 0x0128(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class UPanelSlot* AddChild(class UWidget* Content);
	void ClearChildren();
	bool RemoveChild(class UWidget* Content);
	bool RemoveChildAt(int32 Index_0);

	class UWidget* GetChildAt(int32 Index_0) const;
	int32 GetChildIndex(class UWidget* Content) const;
	int32 GetChildrenCount() const;
	bool HasAnyChildren() const;
	bool HasChild(class UWidget* Content) const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("PanelWidget")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"PanelWidget")
	}
	static class UPanelWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPanelWidget>();
	}
};
DUMPER7_ASSERTS_UPanelWidget;

// Class UMG.ContentWidget
// 0x0000 (0x0130 - 0x0130)
class UContentWidget : public UPanelWidget
{
public:
	class UPanelSlot* SetContent(class UWidget* Content);

	class UPanelSlot* GetContentSlot() const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ContentWidget")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ContentWidget")
	}
	static class UContentWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UContentWidget>();
	}
};
DUMPER7_ASSERTS_UContentWidget;

// Class UMG.WindowTitleBarArea
// 0x0020 (0x0150 - 0x0130)
class UWindowTitleBarArea final : public UContentWidget
{
public:
	bool                                          bDoubleClickTogglesFullscreen;                     // 0x0130(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_131[0x1F];                                     // 0x0131(0x001F)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetHorizontalAlignment(EHorizontalAlignment InHorizontalAlignment);
	void SetPadding(const struct FMargin& InPadding);
	void SetVerticalAlignment(EVerticalAlignment InVerticalAlignment);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("WindowTitleBarArea")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"WindowTitleBarArea")
	}
	static class UWindowTitleBarArea* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWindowTitleBarArea>();
	}
};
DUMPER7_ASSERTS_UWindowTitleBarArea;

// Class UMG.WindowTitleBarAreaSlot
// 0x0028 (0x0060 - 0x0038)
class UWindowTitleBarAreaSlot final : public UPanelSlot
{
public:
	struct FMargin                                Padding;                                           // 0x0038(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, NativeAccessSpecifierProtected)
	EHorizontalAlignment                          HorizontalAlignment;                               // 0x0048(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EVerticalAlignment                            VerticalAlignment;                                 // 0x0049(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_4A[0x16];                                      // 0x004A(0x0016)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetHorizontalAlignment(EHorizontalAlignment InHorizontalAlignment);
	void SetPadding(const struct FMargin& InPadding);
	void SetVerticalAlignment(EVerticalAlignment InVerticalAlignment);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("WindowTitleBarAreaSlot")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"WindowTitleBarAreaSlot")
	}
	static class UWindowTitleBarAreaSlot* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWindowTitleBarAreaSlot>();
	}
};
DUMPER7_ASSERTS_UWindowTitleBarAreaSlot;

// Class UMG.WrapBoxSlot
// 0x0028 (0x0060 - 0x0038)
class UWrapBoxSlot final : public UPanelSlot
{
public:
	struct FMargin                                Padding;                                           // 0x0038(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bFillEmptySpace;                                   // 0x0048(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x3];                                       // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FillSpanWhenLessThan;                              // 0x004C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHorizontalAlignment                          HorizontalAlignment;                               // 0x0050(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVerticalAlignment                            VerticalAlignment;                                 // 0x0051(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_52[0xE];                                       // 0x0052(0x000E)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetFillEmptySpace(bool InbFillEmptySpace);
	void SetFillSpanWhenLessThan(float InFillSpanWhenLessThan);
	void SetHorizontalAlignment(EHorizontalAlignment InHorizontalAlignment);
	void SetPadding(const struct FMargin& InPadding);
	void SetVerticalAlignment(EVerticalAlignment InVerticalAlignment);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("WrapBoxSlot")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"WrapBoxSlot")
	}
	static class UWrapBoxSlot* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWrapBoxSlot>();
	}
};
DUMPER7_ASSERTS_UWrapBoxSlot;

// Class UMG.CircularThrobber
// 0x00C0 (0x01D8 - 0x0118)
class UCircularThrobber final : public UWidget
{
public:
	int32                                         NumberOfPieces;                                    // 0x0118(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Period;                                            // 0x011C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0120(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_124[0x4];                                      // 0x0124(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USlateBrushAsset*                       PieceImage;                                        // 0x0128(0x0008)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSlateBrush                            Image;                                             // 0x0130(0x0090)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	bool                                          bEnableRadius;                                     // 0x01C0(0x0001)(Edit, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1C1[0x17];                                     // 0x01C1(0x0017)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetNumberOfPieces(int32 InNumberOfPieces);
	void SetPeriod(float InPeriod);
	void SetRadius(float InRadius);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("CircularThrobber")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"CircularThrobber")
	}
	static class UCircularThrobber* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCircularThrobber>();
	}
};
DUMPER7_ASSERTS_UCircularThrobber;

// Class UMG.ComboBox
// 0x0038 (0x0150 - 0x0118)
class UComboBox final : public UWidget
{
public:
	TArray<class UObject*>                        Items;                                             // 0x0118(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TDelegate<void(class UObject* Item)>          OnGenerateWidgetEvent;                             // 0x0128(0x0010)(Edit, ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bIsFocusable;                                      // 0x0138(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_139[0x17];                                     // 0x0139(0x0017)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ComboBox")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ComboBox")
	}
	static class UComboBox* GetDefaultObj()
	{
		return GetDefaultObjImpl<UComboBox>();
	}
};
DUMPER7_ASSERTS_UComboBox;

// Class UMG.ComboBoxString
// 0x0C80 (0x0D98 - 0x0118)
class UComboBoxString final : public UWidget
{
public:
	TArray<class FString>                         DefaultOptions;                                    // 0x0118(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	class FString                                 SelectedOption;                                    // 0x0128(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FComboBoxStyle                         WidgetStyle;                                       // 0x0138(0x0428)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FTableRowStyle                         ItemStyle;                                         // 0x0560(0x0718)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FMargin                                ContentPadding;                                    // 0x0C78(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	float                                         MaxListHeight;                                     // 0x0C88(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          HasDownArrow;                                      // 0x0C8C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EnableGamepadNavigationMode;                       // 0x0C8D(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C8E[0x2];                                      // 0x0C8E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateFontInfo                         Font;                                              // 0x0C90(0x0068)(Edit, BlueprintVisible, BlueprintReadOnly, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSlateColor                            ForegroundColor;                                   // 0x0CF8(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	bool                                          bIsFocusable;                                      // 0x0D20(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D21[0x7];                                      // 0x0D21(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(const class FString& Item)>    OnGenerateWidgetEvent;                             // 0x0D28(0x0010)(Edit, ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnSelectionChanged;                                // 0x0D38(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnOpening;                                         // 0x0D48(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_D58[0x40];                                     // 0x0D58(0x0040)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AddOption(const class FString& Option);
	void ClearOptions();
	void ClearSelection();
	void RefreshOptions();
	bool RemoveOption(const class FString& Option);
	void SetSelectedOption(const class FString& Option);

	int32 FindOptionIndex(const class FString& Option) const;
	class FString GetOptionAtIndex(int32 Index_0) const;
	int32 GetOptionCount() const;
	class FString GetSelectedOption() const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ComboBoxString")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ComboBoxString")
	}
	static class UComboBoxString* GetDefaultObj()
	{
		return GetDefaultObjImpl<UComboBoxString>();
	}
};
DUMPER7_ASSERTS_UComboBoxString;

// Class UMG.TextLayoutWidget
// 0x0028 (0x0140 - 0x0118)
class UTextLayoutWidget : public UWidget
{
public:
	struct FShapedTextOptions                     ShapedTextOptions;                                 // 0x0118(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, Protected, NativeAccessSpecifierProtected)
	ETextJustify                                  Justification;                                     // 0x0120(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          AutoWrapText;                                      // 0x0121(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_122[0x2];                                      // 0x0122(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         WrapTextAt;                                        // 0x0124(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ETextWrappingPolicy                           WrappingPolicy;                                    // 0x0128(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_129[0x3];                                      // 0x0129(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMargin                                Margin;                                            // 0x012C(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, Protected, NativeAccessSpecifierProtected)
	float                                         LineHeightPercentage;                              // 0x013C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("TextLayoutWidget")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"TextLayoutWidget")
	}
	static class UTextLayoutWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTextLayoutWidget>();
	}
};
DUMPER7_ASSERTS_UTextLayoutWidget;

// Class UMG.EditableText
// 0x0390 (0x04A8 - 0x0118)
class UEditableText final : public UWidget
{
public:
	class FText                                   Text;                                              // 0x0118(0x0018)(Edit, NativeAccessSpecifierPublic)
	TDelegate<void()>                             TextDelegate;                                      // 0x0130(0x0010)(ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic)
	class FText                                   HintText;                                          // 0x0140(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TDelegate<void()>                             HintTextDelegate;                                  // 0x0158(0x0010)(ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic)
	struct FEditableTextStyle                     WidgetStyle;                                       // 0x0168(0x0248)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class USlateWidgetStyleAsset*                 Style;                                             // 0x03B0(0x0008)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USlateBrushAsset*                       BackgroundImageSelected;                           // 0x03B8(0x0008)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USlateBrushAsset*                       BackgroundImageComposing;                          // 0x03C0(0x0008)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USlateBrushAsset*                       CaretImage;                                        // 0x03C8(0x0008)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSlateFontInfo                         Font;                                              // 0x03D0(0x0068)(Deprecated, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSlateColor                            ColorAndOpacity;                                   // 0x0438(0x0028)(Deprecated, NativeAccessSpecifierPublic)
	bool                                          IsReadOnly;                                        // 0x0460(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsPassword;                                        // 0x0461(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_462[0x2];                                      // 0x0462(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MinimumDesiredWidth;                               // 0x0464(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsCaretMovedWhenGainFocus;                         // 0x0468(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SelectAllTextWhenFocused;                          // 0x0469(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          RevertTextOnEscape;                                // 0x046A(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ClearKeyboardFocusOnCommit;                        // 0x046B(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SelectAllTextOnCommit;                             // 0x046C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AllowContextMenu;                                  // 0x046D(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVirtualKeyboardType                          KeyboardType;                                      // 0x046E(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_46F[0x1];                                      // 0x046F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FShapedTextOptions                     ShapedTextOptions;                                 // 0x0470(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnTextChanged;                                     // 0x0478(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnTextCommitted;                                   // 0x0488(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_498[0x10];                                     // 0x0498(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetHintText(const class FText& InHintText);
	void SetIsPassword(bool InbIsPassword);
	void SetIsReadOnly(bool InbIsReadyOnly);
	void SetText(const class FText& InText);

	class FText GetText() const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("EditableText")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"EditableText")
	}
	static class UEditableText* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEditableText>();
	}
};
DUMPER7_ASSERTS_UEditableText;

// Class UMG.EditableTextBox
// 0x09B8 (0x0AD0 - 0x0118)
class UEditableTextBox final : public UWidget
{
public:
	class FText                                   Text;                                              // 0x0118(0x0018)(Edit, NativeAccessSpecifierPublic)
	TDelegate<void()>                             TextDelegate;                                      // 0x0130(0x0010)(ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic)
	struct FEditableTextBoxStyle                  WidgetStyle;                                       // 0x0140(0x0870)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class USlateWidgetStyleAsset*                 Style;                                             // 0x09B0(0x0008)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   HintText;                                          // 0x09B8(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TDelegate<void()>                             HintTextDelegate;                                  // 0x09D0(0x0010)(ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic)
	struct FSlateFontInfo                         Font;                                              // 0x09E0(0x0068)(Deprecated, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ForegroundColor;                                   // 0x0A48(0x0010)(Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           BackgroundColor;                                   // 0x0A58(0x0010)(Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ReadOnlyForegroundColor;                           // 0x0A68(0x0010)(Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsReadOnly;                                        // 0x0A78(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsPassword;                                        // 0x0A79(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A7A[0x2];                                      // 0x0A7A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MinimumDesiredWidth;                               // 0x0A7C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMargin                                Padding;                                           // 0x0A80(0x0010)(Deprecated, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          IsCaretMovedWhenGainFocus;                         // 0x0A90(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SelectAllTextWhenFocused;                          // 0x0A91(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          RevertTextOnEscape;                                // 0x0A92(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ClearKeyboardFocusOnCommit;                        // 0x0A93(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SelectAllTextOnCommit;                             // 0x0A94(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AllowContextMenu;                                  // 0x0A95(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVirtualKeyboardType                          KeyboardType;                                      // 0x0A96(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A97[0x1];                                      // 0x0A97(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FShapedTextOptions                     ShapedTextOptions;                                 // 0x0A98(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnTextChanged;                                     // 0x0AA0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnTextCommitted;                                   // 0x0AB0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_AC0[0x10];                                     // 0x0AC0(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ClearError();
	void SetError(const class FText& InError);
	void SetText(const class FText& InText);

	class FText GetText() const;
	bool HasError() const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("EditableTextBox")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"EditableTextBox")
	}
	static class UEditableTextBox* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEditableTextBox>();
	}
};
DUMPER7_ASSERTS_UEditableTextBox;

// Class UMG.ExpandableArea
// 0x0248 (0x0360 - 0x0118)
class UExpandableArea final : public UWidget
{
public:
	uint8                                         Pad_118[0x8];                                      // 0x0118(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FExpandableAreaStyle                   Style;                                             // 0x0120(0x0130)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FSlateBrush                            BorderBrush;                                       // 0x0250(0x0090)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FSlateColor                            BorderColor;                                       // 0x02E0(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	bool                                          bIsExpanded;                                       // 0x0308(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_309[0x3];                                      // 0x0309(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MaxHeight;                                         // 0x030C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMargin                                HeaderPadding;                                     // 0x0310(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FMargin                                AreaPadding;                                       // 0x0320(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnExpansionChanged;                                // 0x0330(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class UWidget*                                HeaderContent;                                     // 0x0340(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidget*                                BodyContent;                                       // 0x0348(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_350[0x10];                                     // 0x0350(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetIsExpanded(bool IsExpanded);
	void SetIsExpanded_Animated(bool IsExpanded);

	bool GetIsExpanded() const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ExpandableArea")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ExpandableArea")
	}
	static class UExpandableArea* GetDefaultObj()
	{
		return GetDefaultObjImpl<UExpandableArea>();
	}
};
DUMPER7_ASSERTS_UExpandableArea;

// Class UMG.Image
// 0x00E8 (0x0200 - 0x0118)
class UImage : public UWidget
{
public:
	class USlateBrushAsset*                       Image;                                             // 0x0118(0x0008)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSlateBrush                            Brush;                                             // 0x0120(0x0090)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TDelegate<void()>                             BrushDelegate;                                     // 0x01B0(0x0010)(ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic)
	struct FLinearColor                           ColorAndOpacity;                                   // 0x01C0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void()>                             ColorAndOpacityDelegate;                           // 0x01D0(0x0010)(ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent)> OnMouseButtonDownEvent; // 0x01E0(0x0010)(Edit, ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F0[0x10];                                     // 0x01F0(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class UMaterialInstanceDynamic* GetDynamicMaterial();
	void SetBrush(const struct FSlateBrush& InBrush);
	void SetBrushFromAsset(class USlateBrushAsset* Asset);
	void SetBrushFromMaterial(class UMaterialInterface* Material);
	void SetBrushFromTexture(class UTexture2D* Texture, bool bMatchSize);
	void SetBrushFromTextureDynamic(class UTexture2DDynamic* Texture, bool bMatchSize);
	void SetColorAndOpacity(const struct FLinearColor& InColorAndOpacity);
	void SetOpacity(float InOpacity);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("Image")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"Image")
	}
	static class UImage* GetDefaultObj()
	{
		return GetDefaultObjImpl<UImage>();
	}
};
DUMPER7_ASSERTS_UImage;

// Class UMG.InputKeySelector
// 0x0100 (0x0218 - 0x0118)
class UInputKeySelector final : public UWidget
{
public:
	struct FInputChord                            SelectedKey;                                       // 0x0118(0x0020)(BlueprintVisible, BlueprintReadOnly, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSlateFontInfo                         Font;                                              // 0x0138(0x0068)(Edit, BlueprintVisible, BlueprintReadOnly, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMargin                                Margin;                                            // 0x01A0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FLinearColor                           ColorAndOpacity;                                   // 0x01B0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   KeySelectionText;                                  // 0x01C0(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	bool                                          bAllowModifierKeys;                                // 0x01D8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D9[0x7];                                      // 0x01D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	UMulticastDelegateProperty_                   OnKeySelected;                                     // 0x01E0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnIsSelectingKeyChanged;                           // 0x01F0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_200[0x18];                                     // 0x0200(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetAllowModifierKeys(bool bInAllowModifierKeys);
	void SetKeySelectionText(const class FText& InKeySelectionText);
	void SetSelectedKey(const struct FInputChord& InSelectedKey);

	bool GetIsSelectingKey() const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("InputKeySelector")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"InputKeySelector")
	}
	static class UInputKeySelector* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInputKeySelector>();
	}
};
DUMPER7_ASSERTS_UInputKeySelector;

// Class UMG.NativeWidgetHost
// 0x0010 (0x0128 - 0x0118)
class UNativeWidgetHost : public UWidget
{
public:
	uint8                                         Pad_118[0x10];                                     // 0x0118(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NativeWidgetHost")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NativeWidgetHost")
	}
	static class UNativeWidgetHost* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNativeWidgetHost>();
	}
};
DUMPER7_ASSERTS_UNativeWidgetHost;

// Class UMG.CanvasPanel
// 0x0010 (0x0140 - 0x0130)
class UCanvasPanel : public UPanelWidget
{
public:
	uint8                                         Pad_130[0x10];                                     // 0x0130(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class UCanvasPanelSlot* AddChildToCanvas(class UWidget* Content);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("CanvasPanel")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"CanvasPanel")
	}
	static class UCanvasPanel* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCanvasPanel>();
	}
};
DUMPER7_ASSERTS_UCanvasPanel;

// Class UMG.BackgroundBlur
// 0x00C0 (0x01F0 - 0x0130)
class UBackgroundBlur final : public UContentWidget
{
public:
	struct FMargin                                Padding;                                           // 0x0130(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	EHorizontalAlignment                          HorizontalAlignment;                               // 0x0140(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVerticalAlignment                            VerticalAlignment;                                 // 0x0141(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bApplyAlphaToBlur;                                 // 0x0142(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_143[0x1];                                      // 0x0143(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BlurStrength;                                      // 0x0144(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverrideAutoRadiusCalculation;                    // 0x0148(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_149[0x3];                                      // 0x0149(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         BlurRadius;                                        // 0x014C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSlateBrush                            LowQualityFallbackBrush;                           // 0x0150(0x0090)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E0[0x10];                                     // 0x01E0(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetApplyAlphaToBlur(bool bInApplyAlphaToBlur);
	void SetBlurRadius(int32 InBlurRadius);
	void SetBlurStrength(float InStrength);
	void SetHorizontalAlignment(EHorizontalAlignment InHorizontalAlignment);
	void SetLowQualityFallbackBrush(const struct FSlateBrush& InBrush);
	void SetPadding(const struct FMargin& InPadding);
	void SetVerticalAlignment(EVerticalAlignment InVerticalAlignment);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("BackgroundBlur")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"BackgroundBlur")
	}
	static class UBackgroundBlur* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBackgroundBlur>();
	}
};
DUMPER7_ASSERTS_UBackgroundBlur;

// Class UMG.Border
// 0x0160 (0x0290 - 0x0130)
class UBorder : public UContentWidget
{
public:
	struct FLinearColor                           ContentColorAndOpacity;                            // 0x0130(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void()>                             ContentColorAndOpacityDelegate;                    // 0x0140(0x0010)(ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic)
	struct FMargin                                Padding;                                           // 0x0150(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	EHorizontalAlignment                          HorizontalAlignment;                               // 0x0160(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVerticalAlignment                            VerticalAlignment;                                 // 0x0161(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_162[0x6];                                      // 0x0162(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateBrush                            Background;                                        // 0x0168(0x0090)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TDelegate<void()>                             BackgroundDelegate;                                // 0x01F8(0x0010)(ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic)
	struct FLinearColor                           BrushColor;                                        // 0x0208(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void()>                             BrushColorDelegate;                                // 0x0218(0x0010)(ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector2D                              DesiredSizeScale;                                  // 0x0228(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowEffectWhenDisabled;                           // 0x0230(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_231[0x7];                                      // 0x0231(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent)> OnMouseButtonDownEvent; // 0x0238(0x0010)(Edit, ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent)> OnMouseButtonUpEvent; // 0x0248(0x0010)(Edit, ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent)> OnMouseMoveEvent; // 0x0258(0x0010)(Edit, ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent)> OnMouseDoubleClickEvent; // 0x0268(0x0010)(Edit, ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_278[0x10];                                     // 0x0278(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class USlateBrushAsset*                       Brush;                                             // 0x0288(0x0008)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	class UMaterialInstanceDynamic* GetDynamicMaterial();
	void SetBrush(const struct FSlateBrush& InBrush);
	void SetBrushColor(const struct FLinearColor& InBrushColor);
	void SetBrushFromAsset(class USlateBrushAsset* Asset);
	void SetBrushFromMaterial(class UMaterialInterface* Material);
	void SetBrushFromTexture(class UTexture2D* Texture);
	void SetContentColorAndOpacity(const struct FLinearColor& InContentColorAndOpacity);
	void SetDesiredSizeScale(const struct FVector2D& InScale);
	void SetHorizontalAlignment(EHorizontalAlignment InHorizontalAlignment);
	void SetPadding(const struct FMargin& InPadding);
	void SetVerticalAlignment(EVerticalAlignment InVerticalAlignment);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("Border")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"Border")
	}
	static class UBorder* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBorder>();
	}
};
DUMPER7_ASSERTS_UBorder;

// Class UMG.Button
// 0x0338 (0x0468 - 0x0130)
class UButton : public UContentWidget
{
public:
	class USlateWidgetStyleAsset*                 Style;                                             // 0x0130(0x0008)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FButtonStyle                           WidgetStyle;                                       // 0x0138(0x02A8)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FLinearColor                           ColorAndOpacity;                                   // 0x03E0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           BackgroundColor;                                   // 0x03F0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EButtonClickMethod                            ClickMethod;                                       // 0x0400(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EButtonTouchMethod                            TouchMethod;                                       // 0x0401(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsFocusable;                                       // 0x0402(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_403[0x5];                                      // 0x0403(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	UMulticastDelegateProperty_                   OnClicked;                                         // 0x0408(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnPressed;                                         // 0x0418(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnReleased;                                        // 0x0428(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnHovered;                                         // 0x0438(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnUnhovered;                                       // 0x0448(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_458[0x10];                                     // 0x0458(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetBackgroundColor(const struct FLinearColor& InBackgroundColor);
	void SetColorAndOpacity(const struct FLinearColor& InColorAndOpacity);
	void SetStyle(const struct FButtonStyle& InStyle);

	bool IsPressed() const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("Button")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"Button")
	}
	static class UButton* GetDefaultObj()
	{
		return GetDefaultObjImpl<UButton>();
	}
};
DUMPER7_ASSERTS_UButton;

// Class UMG.CheckBox
// 0x06B0 (0x07E0 - 0x0130)
class UCheckBox final : public UContentWidget
{
public:
	ECheckBoxState                                CheckedState;                                      // 0x0130(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_131[0x7];                                      // 0x0131(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             CheckedStateDelegate;                              // 0x0138(0x0010)(ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic)
	struct FCheckBoxStyle                         WidgetStyle;                                       // 0x0148(0x05E0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class USlateWidgetStyleAsset*                 Style;                                             // 0x0728(0x0008)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USlateBrushAsset*                       UncheckedImage;                                    // 0x0730(0x0008)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USlateBrushAsset*                       UncheckedHoveredImage;                             // 0x0738(0x0008)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USlateBrushAsset*                       UncheckedPressedImage;                             // 0x0740(0x0008)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USlateBrushAsset*                       CheckedImage;                                      // 0x0748(0x0008)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USlateBrushAsset*                       CheckedHoveredImage;                               // 0x0750(0x0008)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USlateBrushAsset*                       CheckedPressedImage;                               // 0x0758(0x0008)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USlateBrushAsset*                       UndeterminedImage;                                 // 0x0760(0x0008)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USlateBrushAsset*                       UndeterminedHoveredImage;                          // 0x0768(0x0008)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USlateBrushAsset*                       UndeterminedPressedImage;                          // 0x0770(0x0008)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHorizontalAlignment                          HorizontalAlignment;                               // 0x0778(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_779[0x3];                                      // 0x0779(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMargin                                Padding;                                           // 0x077C(0x0010)(Deprecated, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_78C[0x4];                                      // 0x078C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateColor                            BorderBackgroundColor;                             // 0x0790(0x0028)(Deprecated, NativeAccessSpecifierPublic)
	bool                                          IsFocusable;                                       // 0x07B8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7B9[0x7];                                      // 0x07B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	UMulticastDelegateProperty_                   OnCheckStateChanged;                               // 0x07C0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_7D0[0x10];                                     // 0x07D0(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetCheckedState(ECheckBoxState InCheckedState);
	void SetIsChecked(bool InIsChecked);

	ECheckBoxState GetCheckedState() const;
	bool IsChecked() const;
	bool IsPressed() const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("CheckBox")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"CheckBox")
	}
	static class UCheckBox* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCheckBox>();
	}
};
DUMPER7_ASSERTS_UCheckBox;

// Class UMG.InvalidationBox
// 0x0018 (0x0148 - 0x0130)
class UInvalidationBox final : public UContentWidget
{
public:
	bool                                          bCanCache;                                         // 0x0130(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          CacheRelativeTransforms;                           // 0x0131(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_132[0x16];                                     // 0x0132(0x0016)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void InvalidateCache();
	void SetCanCache(bool CanCache);

	bool GetCanCache() const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("InvalidationBox")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"InvalidationBox")
	}
	static class UInvalidationBox* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInvalidationBox>();
	}
};
DUMPER7_ASSERTS_UInvalidationBox;

// Class UMG.MenuAnchor
// 0x0040 (0x0170 - 0x0130)
class UMenuAnchor final : public UContentWidget
{
public:
	TSubclassOf<class UUserWidget>                MenuClass;                                         // 0x0130(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void()>                             OnGetMenuContentEvent;                             // 0x0138(0x0010)(Edit, ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic)
	EMenuPlacement                                Placement;                                         // 0x0148(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ShouldDeferPaintingAfterWindowContent;             // 0x0149(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseApplicationMenuStack;                           // 0x014A(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14B[0x5];                                      // 0x014B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	UMulticastDelegateProperty_                   OnMenuOpenChanged;                                 // 0x0150(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_160[0x10];                                     // 0x0160(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Close();
	void Open(bool bFocusMenu);
	void ToggleOpen(bool bFocusOnOpen);

	struct FVector2D GetMenuPosition() const;
	bool HasOpenSubMenus() const;
	bool IsOpen() const;
	bool ShouldOpenDueToClick() const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MenuAnchor")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MenuAnchor")
	}
	static class UMenuAnchor* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMenuAnchor>();
	}
};
DUMPER7_ASSERTS_UMenuAnchor;

// Class UMG.NamedSlot
// 0x0010 (0x0140 - 0x0130)
class UNamedSlot final : public UContentWidget
{
public:
	uint8                                         Pad_130[0x10];                                     // 0x0130(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NamedSlot")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NamedSlot")
	}
	static class UNamedSlot* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNamedSlot>();
	}
};
DUMPER7_ASSERTS_UNamedSlot;

// Class UMG.RetainerBox
// 0x0028 (0x0158 - 0x0130)
class URetainerBox final : public UContentWidget
{
public:
	int32                                         Phase;                                             // 0x0130(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PhaseCount;                                        // 0x0134(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     EffectMaterial;                                    // 0x0138(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   TextureParameter;                                  // 0x0140(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_148[0x10];                                     // 0x0148(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetEffectMaterial(class UMaterialInterface* EffectMaterial_0);
	void SetTextureParameter(class FName TextureParameter_0);

	class UMaterialInstanceDynamic* GetEffectMaterial() const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("RetainerBox")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"RetainerBox")
	}
	static class URetainerBox* GetDefaultObj()
	{
		return GetDefaultObjImpl<URetainerBox>();
	}
};
DUMPER7_ASSERTS_URetainerBox;

// Class UMG.SafeZone
// 0x0018 (0x0148 - 0x0130)
class USafeZone final : public UContentWidget
{
public:
	bool                                          PadLeft;                                           // 0x0130(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PadRight;                                          // 0x0131(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PadTop;                                            // 0x0132(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PadBottom;                                         // 0x0133(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_134[0x14];                                     // 0x0134(0x0014)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetSidesToPad(bool InPadLeft, bool InPadRight, bool InPadTop, bool InPadBottom);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("SafeZone")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"SafeZone")
	}
	static class USafeZone* GetDefaultObj()
	{
		return GetDefaultObjImpl<USafeZone>();
	}
};
DUMPER7_ASSERTS_USafeZone;

// Class UMG.ScaleBox
// 0x0020 (0x0150 - 0x0130)
class UScaleBox final : public UContentWidget
{
public:
	EStretch                                      Stretch;                                           // 0x0130(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EStretchDirection                             StretchDirection;                                  // 0x0131(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_132[0x2];                                      // 0x0132(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         UserSpecifiedScale;                                // 0x0134(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IgnoreInheritedScale;                              // 0x0138(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_139[0x17];                                     // 0x0139(0x0017)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetIgnoreInheritedScale(bool bInIgnoreInheritedScale);
	void SetStretch(EStretch InStretch);
	void SetStretchDirection(EStretchDirection InStretchDirection);
	void SetUserSpecifiedScale(float InUserSpecifiedScale);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ScaleBox")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ScaleBox")
	}
	static class UScaleBox* GetDefaultObj()
	{
		return GetDefaultObjImpl<UScaleBox>();
	}
};
DUMPER7_ASSERTS_UScaleBox;

// Class UMG.SizeBox
// 0x0030 (0x0160 - 0x0130)
class USizeBox final : public UContentWidget
{
public:
	uint8                                         bOverride_WidthOverride : 1;                       // 0x0130(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_HeightOverride : 1;                      // 0x0130(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_MinDesiredWidth : 1;                     // 0x0130(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_MinDesiredHeight : 1;                    // 0x0130(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_MaxDesiredWidth : 1;                     // 0x0130(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_MaxDesiredHeight : 1;                    // 0x0130(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_MaxAspectRatio : 1;                      // 0x0130(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_131[0x3];                                      // 0x0131(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         WidthOverride;                                     // 0x0134(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HeightOverride;                                    // 0x0138(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinDesiredWidth;                                   // 0x013C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinDesiredHeight;                                  // 0x0140(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxDesiredWidth;                                   // 0x0144(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxDesiredHeight;                                  // 0x0148(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxAspectRatio;                                    // 0x014C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_150[0x10];                                     // 0x0150(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ClearHeightOverride();
	void ClearMaxAspectRatio();
	void ClearMaxDesiredHeight();
	void ClearMaxDesiredWidth();
	void ClearMinDesiredHeight();
	void ClearMinDesiredWidth();
	void ClearWidthOverride();
	void SetHeightOverride(float InHeightOverride);
	void SetMaxAspectRatio(float InMaxAspectRatio);
	void SetMaxDesiredHeight(float InMaxDesiredHeight);
	void SetMaxDesiredWidth(float InMaxDesiredWidth);
	void SetMinDesiredHeight(float InMinDesiredHeight);
	void SetMinDesiredWidth(float InMinDesiredWidth);
	void SetWidthOverride(float InWidthOverride);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("SizeBox")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"SizeBox")
	}
	static class USizeBox* GetDefaultObj()
	{
		return GetDefaultObjImpl<USizeBox>();
	}
};
DUMPER7_ASSERTS_USizeBox;

// Class UMG.Viewport
// 0x0028 (0x0158 - 0x0130)
class UViewport final : public UContentWidget
{
public:
	struct FLinearColor                           BackgroundColor;                                   // 0x0130(0x0010)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_140[0x18];                                     // 0x0140(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetViewLocation(const struct FVector& Location);
	void SetViewRotation(const struct FRotator& Rotation);
	class AActor* Spawn(TSubclassOf<class AActor> ActorClass);

	struct FVector GetViewLocation() const;
	class UWorld* GetViewportWorld() const;
	struct FRotator GetViewRotation() const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("Viewport")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"Viewport")
	}
	static class UViewport* GetDefaultObj()
	{
		return GetDefaultObjImpl<UViewport>();
	}
};
DUMPER7_ASSERTS_UViewport;

// Class UMG.GridPanel
// 0x0030 (0x0160 - 0x0130)
class UGridPanel final : public UPanelWidget
{
public:
	TArray<float>                                 ColumnFill;                                        // 0x0130(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<float>                                 RowFill;                                           // 0x0140(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_150[0x10];                                     // 0x0150(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class UGridSlot* AddChildToGrid(class UWidget* Content);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("GridPanel")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"GridPanel")
	}
	static class UGridPanel* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGridPanel>();
	}
};
DUMPER7_ASSERTS_UGridPanel;

// Class UMG.HorizontalBox
// 0x0010 (0x0140 - 0x0130)
class UHorizontalBox final : public UPanelWidget
{
public:
	uint8                                         Pad_130[0x10];                                     // 0x0130(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class UHorizontalBoxSlot* AddChildToHorizontalBox(class UWidget* Content);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("HorizontalBox")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"HorizontalBox")
	}
	static class UHorizontalBox* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHorizontalBox>();
	}
};
DUMPER7_ASSERTS_UHorizontalBox;

// Class UMG.Overlay
// 0x0010 (0x0140 - 0x0130)
class UOverlay final : public UPanelWidget
{
public:
	uint8                                         Pad_130[0x10];                                     // 0x0130(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class UOverlaySlot* AddChildToOverlay(class UWidget* Content);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("Overlay")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"Overlay")
	}
	static class UOverlay* GetDefaultObj()
	{
		return GetDefaultObjImpl<UOverlay>();
	}
};
DUMPER7_ASSERTS_UOverlay;

// Class UMG.ScrollBox
// 0x0798 (0x08C8 - 0x0130)
class UScrollBox final : public UPanelWidget
{
public:
	struct FScrollBoxStyle                        WidgetStyle;                                       // 0x0130(0x0248)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FScrollBarStyle                        WidgetBarStyle;                                    // 0x0378(0x0518)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class USlateWidgetStyleAsset*                 Style;                                             // 0x0890(0x0008)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USlateWidgetStyleAsset*                 BarStyle;                                          // 0x0898(0x0008)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOrientation                                  Orientation;                                       // 0x08A0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESlateVisibility                              ScrollBarVisibility;                               // 0x08A1(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EConsumeMouseWheel                            ConsumeMouseWheel;                                 // 0x08A2(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8A3[0x1];                                      // 0x08A3(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              ScrollbarThickness;                                // 0x08A4(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AlwaysShowScrollbar;                               // 0x08AC(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDescendantScrollDestination                  NavigationDestination;                             // 0x08AD(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8AE[0x2];                                      // 0x08AE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         NavigationScrollPadding;                           // 0x08B0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8B4[0x14];                                     // 0x08B4(0x0014)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ScrollToEnd();
	void ScrollToStart();
	void ScrollWidgetIntoView(class UWidget* WidgetToFind, bool AnimateScroll, EDescendantScrollDestination ScrollDesintion);
	void SetScrollOffset(float NewScrollOffset);

	float GetScrollOffset() const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ScrollBox")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ScrollBox")
	}
	static class UScrollBox* GetDefaultObj()
	{
		return GetDefaultObjImpl<UScrollBox>();
	}
};
DUMPER7_ASSERTS_UScrollBox;

// Class UMG.UniformGridPanel
// 0x0028 (0x0158 - 0x0130)
class UUniformGridPanel final : public UPanelWidget
{
public:
	struct FMargin                                SlotPadding;                                       // 0x0130(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	float                                         MinDesiredSlotWidth;                               // 0x0140(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinDesiredSlotHeight;                              // 0x0144(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_148[0x10];                                     // 0x0148(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class UUniformGridSlot* AddChildToUniformGrid(class UWidget* Content);
	void SetMinDesiredSlotHeight(float InMinDesiredSlotHeight);
	void SetMinDesiredSlotWidth(float InMinDesiredSlotWidth);
	void SetSlotPadding(const struct FMargin& InSlotPadding);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("UniformGridPanel")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"UniformGridPanel")
	}
	static class UUniformGridPanel* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUniformGridPanel>();
	}
};
DUMPER7_ASSERTS_UUniformGridPanel;

// Class UMG.VerticalBox
// 0x0010 (0x0140 - 0x0130)
class UVerticalBox final : public UPanelWidget
{
public:
	uint8                                         Pad_130[0x10];                                     // 0x0130(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class UVerticalBoxSlot* AddChildToVerticalBox(class UWidget* Content);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("VerticalBox")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"VerticalBox")
	}
	static class UVerticalBox* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVerticalBox>();
	}
};
DUMPER7_ASSERTS_UVerticalBox;

// Class UMG.WidgetSwitcher
// 0x0018 (0x0148 - 0x0130)
class UWidgetSwitcher : public UPanelWidget
{
public:
	int32                                         ActiveWidgetIndex;                                 // 0x0130(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_134[0x14];                                     // 0x0134(0x0014)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetActiveWidget(class UWidget* Widget);
	void SetActiveWidgetIndex(int32 Index_0);

	int32 GetActiveWidgetIndex() const;
	int32 GetNumWidgets() const;
	class UWidget* GetWidgetAtIndex(int32 Index_0) const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("WidgetSwitcher")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"WidgetSwitcher")
	}
	static class UWidgetSwitcher* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWidgetSwitcher>();
	}
};
DUMPER7_ASSERTS_UWidgetSwitcher;

// Class UMG.WrapBox
// 0x0020 (0x0150 - 0x0130)
class UWrapBox final : public UPanelWidget
{
public:
	struct FVector2D                              InnerSlotPadding;                                  // 0x0130(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WrapWidth;                                         // 0x0138(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bExplicitWrapWidth;                                // 0x013C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13D[0x13];                                     // 0x013D(0x0013)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class UWrapBoxSlot* AddChildWrapBox(class UWidget* Content);
	void SetInnerSlotPadding(const struct FVector2D& InPadding);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("WrapBox")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"WrapBox")
	}
	static class UWrapBox* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWrapBox>();
	}
};
DUMPER7_ASSERTS_UWrapBox;

// Class UMG.ProgressBar
// 0x0220 (0x0338 - 0x0118)
class UProgressBar final : public UWidget
{
public:
	struct FProgressBarStyle                      WidgetStyle;                                       // 0x0118(0x01B8)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class USlateWidgetStyleAsset*                 Style;                                             // 0x02D0(0x0008)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USlateBrushAsset*                       BackgroundImage;                                   // 0x02D8(0x0008)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USlateBrushAsset*                       FillImage;                                         // 0x02E0(0x0008)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USlateBrushAsset*                       MarqueeImage;                                      // 0x02E8(0x0008)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Percent;                                           // 0x02F0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EProgressBarFillType                          BarFillType;                                       // 0x02F4(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsMarquee;                                        // 0x02F5(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2F6[0x2];                                      // 0x02F6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             PercentDelegate;                                   // 0x02F8(0x0010)(ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic)
	struct FLinearColor                           FillColorAndOpacity;                               // 0x0308(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void()>                             FillColorAndOpacityDelegate;                       // 0x0318(0x0010)(ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_328[0x10];                                     // 0x0328(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetFillColorAndOpacity(const struct FLinearColor& InColor);
	void SetIsMarquee(bool InbIsMarquee);
	void SetPercent(float InPercent);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ProgressBar")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ProgressBar")
	}
	static class UProgressBar* GetDefaultObj()
	{
		return GetDefaultObjImpl<UProgressBar>();
	}
};
DUMPER7_ASSERTS_UProgressBar;

// Class UMG.ScrollBar
// 0x0540 (0x0658 - 0x0118)
class UScrollBar final : public UWidget
{
public:
	struct FScrollBarStyle                        WidgetStyle;                                       // 0x0118(0x0518)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class USlateWidgetStyleAsset*                 Style;                                             // 0x0630(0x0008)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAlwaysShowScrollbar;                              // 0x0638(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOrientation                                  Orientation;                                       // 0x0639(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_63A[0x2];                                      // 0x063A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              Thickness;                                         // 0x063C(0x0008)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_644[0x14];                                     // 0x0644(0x0014)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetState(float InOffsetFraction, float InThumbSizeFraction);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ScrollBar")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ScrollBar")
	}
	static class UScrollBar* GetDefaultObj()
	{
		return GetDefaultObjImpl<UScrollBar>();
	}
};
DUMPER7_ASSERTS_UScrollBar;

// Class UMG.Slider
// 0x02F8 (0x0410 - 0x0118)
class USlider : public UWidget
{
public:
	float                                         Value;                                             // 0x0118(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11C[0x4];                                      // 0x011C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             ValueDelegate;                                     // 0x0120(0x0010)(ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic)
	struct FSliderStyle                           WidgetStyle;                                       // 0x0130(0x0250)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	EOrientation                                  Orientation;                                       // 0x0380(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_381[0x3];                                      // 0x0381(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           SliderBarColor;                                    // 0x0384(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           SliderHandleColor;                                 // 0x0394(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IndentHandle;                                      // 0x03A4(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Locked;                                            // 0x03A5(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3A6[0x2];                                      // 0x03A6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         StepSize;                                          // 0x03A8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsFocusable;                                       // 0x03AC(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3AD[0x3];                                      // 0x03AD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	UMulticastDelegateProperty_                   OnMouseCaptureBegin;                               // 0x03B0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnMouseCaptureEnd;                                 // 0x03C0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnControllerCaptureBegin;                          // 0x03D0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnControllerCaptureEnd;                            // 0x03E0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnValueChanged;                                    // 0x03F0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_400[0x10];                                     // 0x0400(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetIndentHandle(bool InValue);
	void SetLocked(bool InValue);
	void SetSliderBarColor(const struct FLinearColor& InValue);
	void SetSliderHandleColor(const struct FLinearColor& InValue);
	void SetStepSize(float InValue);
	void SetValue(float InValue);

	float GetValue() const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("Slider")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"Slider")
	}
	static class USlider* GetDefaultObj()
	{
		return GetDefaultObjImpl<USlider>();
	}
};
DUMPER7_ASSERTS_USlider;

// Class UMG.Spacer
// 0x0018 (0x0130 - 0x0118)
class USpacer final : public UWidget
{
public:
	struct FVector2D                              Size;                                              // 0x0118(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_120[0x10];                                     // 0x0120(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetSize(const struct FVector2D& InSize);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("Spacer")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"Spacer")
	}
	static class USpacer* GetDefaultObj()
	{
		return GetDefaultObjImpl<USpacer>();
	}
};
DUMPER7_ASSERTS_USpacer;

// Class UMG.SpinBox
// 0x0438 (0x0550 - 0x0118)
class USpinBox final : public UWidget
{
public:
	float                                         Value;                                             // 0x0118(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11C[0x4];                                      // 0x011C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             ValueDelegate;                                     // 0x0120(0x0010)(ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic)
	struct FSpinBoxStyle                          WidgetStyle;                                       // 0x0130(0x0310)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class USlateWidgetStyleAsset*                 Style;                                             // 0x0440(0x0008)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delta;                                             // 0x0448(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SliderExponent;                                    // 0x044C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSlateFontInfo                         Font;                                              // 0x0450(0x0068)(Edit, BlueprintVisible, BlueprintReadOnly, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinDesiredWidth;                                   // 0x04B8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ClearKeyboardFocusOnCommit;                        // 0x04BC(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SelectAllTextOnCommit;                             // 0x04BD(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4BE[0x2];                                      // 0x04BE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateColor                            ForegroundColor;                                   // 0x04C0(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnValueChanged;                                    // 0x04E8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnValueCommitted;                                  // 0x04F8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnBeginSliderMovement;                             // 0x0508(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnEndSliderMovement;                               // 0x0518(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         bOverride_MinValue : 1;                            // 0x0528(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         bOverride_MaxValue : 1;                            // 0x0528(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         bOverride_MinSliderValue : 1;                      // 0x0528(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         bOverride_MaxSliderValue : 1;                      // 0x0528(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         Pad_529[0x3];                                      // 0x0529(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MinValue;                                          // 0x052C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MaxValue;                                          // 0x0530(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MinSliderValue;                                    // 0x0534(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MaxSliderValue;                                    // 0x0538(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_53C[0x14];                                     // 0x053C(0x0014)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ClearMaxSliderValue();
	void ClearMaxValue();
	void ClearMinSliderValue();
	void ClearMinValue();
	void SetForegroundColor(const struct FSlateColor& InForegroundColor);
	void SetMaxSliderValue(float NewValue);
	void SetMaxValue(float NewValue);
	void SetMinSliderValue(float NewValue);
	void SetMinValue(float NewValue);
	void SetValue(float NewValue);

	float GetMaxSliderValue() const;
	float GetMaxValue() const;
	float GetMinSliderValue() const;
	float GetMinValue() const;
	float GetValue() const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("SpinBox")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"SpinBox")
	}
	static class USpinBox* GetDefaultObj()
	{
		return GetDefaultObjImpl<USpinBox>();
	}
};
DUMPER7_ASSERTS_USpinBox;

// Class UMG.TableViewBase
// 0x0000 (0x0118 - 0x0118)
class UTableViewBase : public UWidget
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("TableViewBase")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"TableViewBase")
	}
	static class UTableViewBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTableViewBase>();
	}
};
DUMPER7_ASSERTS_UTableViewBase;

// Class UMG.ListView
// 0x0040 (0x0158 - 0x0118)
class UListView final : public UTableViewBase
{
public:
	float                                         ItemHeight;                                        // 0x0118(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11C[0x4];                                      // 0x011C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UObject*>                        Items;                                             // 0x0120(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	ESelectionMode                                SelectionMode;                                     // 0x0130(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_131[0x7];                                      // 0x0131(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(class UObject* Item)>          OnGenerateRowEvent;                                // 0x0138(0x0010)(Edit, ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_148[0x10];                                     // 0x0148(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ListView")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ListView")
	}
	static class UListView* GetDefaultObj()
	{
		return GetDefaultObjImpl<UListView>();
	}
};
DUMPER7_ASSERTS_UListView;

// Class UMG.TileView
// 0x0040 (0x0158 - 0x0118)
class UTileView final : public UTableViewBase
{
public:
	float                                         ItemWidth;                                         // 0x0118(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ItemHeight;                                        // 0x011C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UObject*>                        Items;                                             // 0x0120(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	ESelectionMode                                SelectionMode;                                     // 0x0130(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_131[0x7];                                      // 0x0131(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(class UObject* Item)>          OnGenerateTileEvent;                               // 0x0138(0x0010)(Edit, ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_148[0x10];                                     // 0x0148(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void RequestListRefresh();
	void SetItemHeight(float Height);
	void SetItemWidth(float Width);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("TileView")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"TileView")
	}
	static class UTileView* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTileView>();
	}
};
DUMPER7_ASSERTS_UTileView;

// Class UMG.MultiLineEditableText
// 0x02E8 (0x0428 - 0x0140)
class UMultiLineEditableText final : public UTextLayoutWidget
{
public:
	class FText                                   Text;                                              // 0x0140(0x0018)(Edit, NativeAccessSpecifierPublic)
	class FText                                   HintText;                                          // 0x0158(0x0018)(Edit, NativeAccessSpecifierPublic)
	TDelegate<void()>                             HintTextDelegate;                                  // 0x0170(0x0010)(ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic)
	struct FTextBlockStyle                        WidgetStyle;                                       // 0x0180(0x0208)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateFontInfo                         Font;                                              // 0x0388(0x0068)(Deprecated, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AllowContextMenu;                                  // 0x03F0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3F1[0x7];                                      // 0x03F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	UMulticastDelegateProperty_                   OnTextChanged;                                     // 0x03F8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnTextCommitted;                                   // 0x0408(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_418[0x10];                                     // 0x0418(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetText(const class FText& InText);

	class FText GetText() const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MultiLineEditableText")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MultiLineEditableText")
	}
	static class UMultiLineEditableText* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMultiLineEditableText>();
	}
};
DUMPER7_ASSERTS_UMultiLineEditableText;

// Class UMG.MultiLineEditableTextBox
// 0x0B90 (0x0CD0 - 0x0140)
class UMultiLineEditableTextBox final : public UTextLayoutWidget
{
public:
	class FText                                   Text;                                              // 0x0140(0x0018)(Edit, NativeAccessSpecifierPublic)
	class FText                                   HintText;                                          // 0x0158(0x0018)(Edit, NativeAccessSpecifierPublic)
	TDelegate<void()>                             HintTextDelegate;                                  // 0x0170(0x0010)(ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic)
	struct FEditableTextBoxStyle                  WidgetStyle;                                       // 0x0180(0x0870)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FTextBlockStyle                        TextStyle;                                         // 0x09F0(0x0208)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          AllowContextMenu;                                  // 0x0BF8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_BF9[0x7];                                      // 0x0BF9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USlateWidgetStyleAsset*                 Style;                                             // 0x0C00(0x0008)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSlateFontInfo                         Font;                                              // 0x0C08(0x0068)(Deprecated, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ForegroundColor;                                   // 0x0C70(0x0010)(Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           BackgroundColor;                                   // 0x0C80(0x0010)(Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ReadOnlyForegroundColor;                           // 0x0C90(0x0010)(Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnTextChanged;                                     // 0x0CA0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnTextCommitted;                                   // 0x0CB0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_CC0[0x10];                                     // 0x0CC0(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetError(const class FText& InError);
	void SetText(const class FText& InText);

	class FText GetText() const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MultiLineEditableTextBox")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MultiLineEditableTextBox")
	}
	static class UMultiLineEditableTextBox* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMultiLineEditableTextBox>();
	}
};
DUMPER7_ASSERTS_UMultiLineEditableTextBox;

// Class UMG.RichTextBlock
// 0x02C8 (0x0408 - 0x0140)
class URichTextBlock final : public UTextLayoutWidget
{
public:
	class FText                                   Text;                                              // 0x0140(0x0018)(Edit, Protected, NativeAccessSpecifierProtected)
	TDelegate<void()>                             TextDelegate;                                      // 0x0158(0x0010)(ZeroConstructor, InstancedReference, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FSlateFontInfo                         Font;                                              // 0x0168(0x0068)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FLinearColor                           Color;                                             // 0x01D0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class URichTextBlockDecorator*>        Decorators;                                        // 0x01E0(0x0010)(Edit, ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_1F0[0x218];                                    // 0x01F0(0x0218)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("RichTextBlock")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"RichTextBlock")
	}
	static class URichTextBlock* GetDefaultObj()
	{
		return GetDefaultObjImpl<URichTextBlock>();
	}
};
DUMPER7_ASSERTS_URichTextBlock;

// Class UMG.TextBlock
// 0x0108 (0x0248 - 0x0140)
class UTextBlock : public UTextLayoutWidget
{
public:
	class FText                                   Text;                                              // 0x0140(0x0018)(Edit, NativeAccessSpecifierPublic)
	TDelegate<void()>                             TextDelegate;                                      // 0x0158(0x0010)(ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic)
	struct FSlateColor                            ColorAndOpacity;                                   // 0x0168(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TDelegate<void()>                             ColorAndOpacityDelegate;                           // 0x0190(0x0010)(ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic)
	struct FSlateFontInfo                         Font;                                              // 0x01A0(0x0068)(Edit, BlueprintVisible, BlueprintReadOnly, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ShadowOffset;                                      // 0x0208(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ShadowColorAndOpacity;                             // 0x0210(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void()>                             ShadowColorAndOpacityDelegate;                     // 0x0220(0x0010)(ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic)
	float                                         MinDesiredWidth;                                   // 0x0230(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWrapWithInvalidationPanel;                        // 0x0234(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_235[0x13];                                     // 0x0235(0x0013)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class UMaterialInstanceDynamic* GetDynamicFontMaterial();
	class UMaterialInstanceDynamic* GetDynamicOutlineMaterial();
	void SetColorAndOpacity(const struct FSlateColor& InColorAndOpacity);
	void SetFont(const struct FSlateFontInfo& InFontInfo);
	void SetJustification(ETextJustify InJustification);
	void SetMinDesiredWidth(float InMinDesiredWidth);
	void SetOpacity(float InOpacity);
	void SetShadowColorAndOpacity(const struct FLinearColor& InShadowColorAndOpacity);
	void SetShadowOffset(const struct FVector2D& InShadowOffset);
	void SetText(const class FText& InText);

	class FText GetText() const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("TextBlock")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"TextBlock")
	}
	static class UTextBlock* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTextBlock>();
	}
};
DUMPER7_ASSERTS_UTextBlock;

// Class UMG.Throbber
// 0x00B0 (0x01C8 - 0x0118)
class UThrobber final : public UWidget
{
public:
	int32                                         NumberOfPieces;                                    // 0x0118(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAnimateHorizontally;                              // 0x011C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAnimateVertically;                                // 0x011D(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAnimateOpacity;                                   // 0x011E(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11F[0x1];                                      // 0x011F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class USlateBrushAsset*                       PieceImage;                                        // 0x0120(0x0008)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSlateBrush                            Image;                                             // 0x0128(0x0090)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B8[0x10];                                     // 0x01B8(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetAnimateHorizontally(bool bInAnimateHorizontally);
	void SetAnimateOpacity(bool bInAnimateOpacity);
	void SetAnimateVertically(bool bInAnimateVertically);
	void SetNumberOfPieces(int32 InNumberOfPieces);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("Throbber")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"Throbber")
	}
	static class UThrobber* GetDefaultObj()
	{
		return GetDefaultObjImpl<UThrobber>();
	}
};
DUMPER7_ASSERTS_UThrobber;

// Class UMG.WidgetAnimation
// 0x0038 (0x0310 - 0x02D8)
class UWidgetAnimation final : public UMovieSceneSequence
{
public:
	UMulticastDelegateProperty_                   OnAnimationStarted;                                // 0x02D8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnAnimationFinished;                               // 0x02E8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class UMovieScene*                            MovieScene;                                        // 0x02F8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FWidgetAnimationBinding>        AnimationBindings;                                 // 0x0300(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)

public:
	float GetEndTime() const;
	float GetStartTime() const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("WidgetAnimation")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"WidgetAnimation")
	}
	static class UWidgetAnimation* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWidgetAnimation>();
	}
};
DUMPER7_ASSERTS_UWidgetAnimation;

// Class UMG.WidgetBlueprintLibrary
// 0x0000 (0x0028 - 0x0028)
class UWidgetBlueprintLibrary final : public UBlueprintFunctionLibrary
{
public:
	static void CancelDragDrop();
	static struct FEventReply CaptureJoystick(struct FEventReply& Reply, class UWidget* CapturingWidget, bool bInAllJoysticks);
	static struct FEventReply CaptureMouse(struct FEventReply& Reply, class UWidget* CapturingWidget);
	static struct FEventReply ClearUserFocus(struct FEventReply& Reply, bool bInAllUsers);
	static class UUserWidget* Create(class UObject* WorldContextObject, TSubclassOf<class UUserWidget> WidgetType, class APlayerController* OwningPlayer);
	static class UDragDropOperation* CreateDragDropOperation(TSubclassOf<class UDragDropOperation> OperationClass);
	static struct FEventReply DetectDrag(struct FEventReply& Reply, class UWidget* WidgetDetectingDrag, const struct FKey& DragKey);
	static struct FEventReply DetectDragIfPressed(const struct FPointerEvent& PointerEvent, class UWidget* WidgetDetectingDrag, const struct FKey& DragKey);
	static void DismissAllMenus();
	static void DrawBox(struct FPaintContext& Context, const struct FVector2D& Position, const struct FVector2D& Size, class USlateBrushAsset* Brush, const struct FLinearColor& Tint);
	static void DrawLine(struct FPaintContext& Context, const struct FVector2D& PositionA, const struct FVector2D& PositionB, const struct FLinearColor& Tint, bool bAntiAlias);
	static void DrawLines(struct FPaintContext& Context, const TArray<struct FVector2D>& Points, const struct FLinearColor& Tint, bool bAntiAlias);
	static void DrawText(struct FPaintContext& Context, const class FString& inString, const struct FVector2D& Position, const struct FLinearColor& Tint);
	static void DrawTextFormatted(struct FPaintContext& Context, const class FText& Text, const struct FVector2D& Position, class UFont* Font, int32 FontSize, class FName FontTypeFace, const struct FLinearColor& Tint);
	static struct FEventReply EndDragDrop(struct FEventReply& Reply);
	static void GetAllWidgetsOfClass(class UObject* WorldContextObject, TArray<class UUserWidget*>* FoundWidgets, TSubclassOf<class UUserWidget> WidgetClass, bool TopLevelOnly);
	static void GetAllWidgetsWithInterface(class UObject* WorldContextObject, TSubclassOf<class IInterface> Interface, TArray<class UUserWidget*>* FoundWidgets, bool TopLevelOnly);
	static class UObject* GetBrushResource(struct FSlateBrush& Brush);
	static class UMaterialInterface* GetBrushResourceAsMaterial(struct FSlateBrush& Brush);
	static class UTexture2D* GetBrushResourceAsTexture2D(struct FSlateBrush& Brush);
	static class UDragDropOperation* GetDragDroppingContent();
	static class UMaterialInstanceDynamic* GetDynamicMaterial(struct FSlateBrush& Brush);
	static struct FInputEvent GetInputEventFromCharacterEvent(const struct FCharacterEvent& Event);
	static struct FInputEvent GetInputEventFromControllerEvent(const struct FControllerEvent& Event);
	static struct FInputEvent GetInputEventFromKeyEvent(const struct FKeyEvent& Event);
	static struct FInputEvent GetInputEventFromNavigationEvent(const struct FNavigationEvent& Event);
	static struct FInputEvent GetInputEventFromPointerEvent(const struct FPointerEvent& Event);
	static struct FKeyEvent GetKeyEventFromAnalogInputEvent(const struct FAnalogInputEvent& Event);
	static void GetSafeZonePadding(class UObject* WorldContextObject, struct FVector2D* SafePadding, struct FVector2D* SafePaddingScale, struct FVector2D* SpillOverPadding);
	static struct FEventReply Handled();
	static bool IsDragDropping();
	static struct FEventReply LockMouse(struct FEventReply& Reply, class UWidget* CapturingWidget);
	static struct FSlateBrush MakeBrushFromAsset(class USlateBrushAsset* BrushAsset);
	static struct FSlateBrush MakeBrushFromMaterial(class UMaterialInterface* Material, int32 Width, int32 Height);
	static struct FSlateBrush MakeBrushFromTexture(class UTexture2D* Texture, int32 Width, int32 Height);
	static struct FSlateBrush NoResourceBrush();
	static struct FEventReply ReleaseJoystickCapture(struct FEventReply& Reply, bool bInAllJoysticks);
	static struct FEventReply ReleaseMouseCapture(struct FEventReply& Reply);
	static void SetBrushResourceToMaterial(struct FSlateBrush& Brush, class UMaterialInterface* Material);
	static void SetBrushResourceToTexture(struct FSlateBrush& Brush, class UTexture2D* Texture);
	static void SetFocusToGameViewport();
	static void SetInputMode_GameAndUI(class APlayerController* Target, class UWidget* InWidgetToFocus, bool bLockMouseToViewport, bool bHideCursorDuringCapture);
	static void SetInputMode_GameAndUIEx(class APlayerController* Target, class UWidget* InWidgetToFocus, EMouseLockMode InMouseLockMode, bool bHideCursorDuringCapture);
	static void SetInputMode_GameOnly(class APlayerController* Target);
	static void SetInputMode_UIOnly(class APlayerController* Target, class UWidget* InWidgetToFocus, bool bLockMouseToViewport);
	static void SetInputMode_UIOnlyEx(class APlayerController* Target, class UWidget* InWidgetToFocus, EMouseLockMode InMouseLockMode);
	static struct FEventReply SetMousePosition(struct FEventReply& Reply, const struct FVector2D& NewMousePosition);
	static struct FEventReply SetUserFocus(struct FEventReply& Reply, class UWidget* FocusWidget, bool bInAllUsers);
	static struct FEventReply Unhandled();
	static struct FEventReply UnlockMouse(struct FEventReply& Reply);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("WidgetBlueprintLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"WidgetBlueprintLibrary")
	}
	static class UWidgetBlueprintLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWidgetBlueprintLibrary>();
	}
};
DUMPER7_ASSERTS_UWidgetBlueprintLibrary;

// Class UMG.WidgetComponent
// 0x0130 (0x08B0 - 0x0780)
class UWidgetComponent final : public UMeshComponent
{
public:
	EWidgetSpace                                  Space;                                             // 0x0778(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_779[0x7];                                      // 0x0779(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UUserWidget>                WidgetClass;                                       // 0x0780(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FIntPoint                              DrawSize;                                          // 0x0788(0x0008)(Edit, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bManuallyRedraw;                                   // 0x0790(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bRedrawRequested;                                  // 0x0791(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_792[0x2];                                      // 0x0792(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RedrawTime;                                        // 0x0794(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_798[0x8];                                      // 0x0798(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FIntPoint                              CurrentDrawSize;                                   // 0x07A0(0x0008)(IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bDrawAtDesiredSize;                                // 0x07A8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_7A9[0x3];                                      // 0x07A9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              Pivot;                                             // 0x07AC(0x0008)(Edit, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bReceiveHardwareInput;                             // 0x07B4(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bWindowFocusable;                                  // 0x07B5(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_7B6[0x2];                                      // 0x07B6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class ULocalPlayer*                           OwnerPlayer;                                       // 0x07B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FLinearColor                           BackgroundColor;                                   // 0x07C0(0x0010)(Edit, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FLinearColor                           TintColorAndOpacity;                               // 0x07D0(0x0010)(Edit, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         OpacityFromTexture;                                // 0x07E0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EWidgetBlendMode                              BlendMode;                                         // 0x07E4(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsTwoSided;                                       // 0x07E5(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          TickWhenOffscreen;                                 // 0x07E6(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_7E7[0x1];                                      // 0x07E7(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class UUserWidget*                            Widget;                                            // 0x07E8(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, DuplicateTransient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_7F0[0x20];                                     // 0x07F0(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	class UBodySetup*                             BodySetup;                                         // 0x0810(0x0008)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMaterialInterface*                     TranslucentMaterial;                               // 0x0818(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMaterialInterface*                     TranslucentMaterial_OneSided;                      // 0x0820(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMaterialInterface*                     OpaqueMaterial;                                    // 0x0828(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMaterialInterface*                     OpaqueMaterial_OneSided;                           // 0x0830(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMaterialInterface*                     MaskedMaterial;                                    // 0x0838(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMaterialInterface*                     MaskedMaterial_OneSided;                           // 0x0840(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTextureRenderTarget2D*                 RenderTarget;                                      // 0x0848(0x0008)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMaterialInstanceDynamic*               MaterialInstance;                                  // 0x0850(0x0008)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bAddedToScreen;                                    // 0x0858(0x0001)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bEditTimeUsable;                                   // 0x0859(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_85A[0x6];                                      // 0x085A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   SharedLayerName;                                   // 0x0860(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         LayerZOrder;                                       // 0x0868(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EWidgetGeometryMode                           GeometryMode;                                      // 0x086C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_86D[0x3];                                      // 0x086D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CylinderArcAngle;                                  // 0x0870(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_874[0x3C];                                     // 0x0874(0x003C)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void RequestRedraw();
	void SetBackgroundColor(const struct FLinearColor& NewBackgroundColor);
	void SetDrawSize(const struct FVector2D& Size);
	void SetOwnerPlayer(class ULocalPlayer* LocalPlayer);
	void SetWidget(class UUserWidget* Widget_0);

	struct FVector2D GetDrawSize() const;
	class UMaterialInstanceDynamic* GetMaterialInstance() const;
	class ULocalPlayer* GetOwnerPlayer() const;
	class UTextureRenderTarget2D* GetRenderTarget() const;
	class UUserWidget* GetUserWidgetObject() const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("WidgetComponent")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"WidgetComponent")
	}
	static class UWidgetComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWidgetComponent>();
	}
};
DUMPER7_ASSERTS_UWidgetComponent;

// Class UMG.WidgetInteractionComponent
// 0x01F0 (0x0480 - 0x0290)
class UWidgetInteractionComponent final : public USceneComponent
{
public:
	UMulticastDelegateProperty_                   OnHoveredWidgetChanged;                            // 0x0290(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A0[0x10];                                     // 0x02A0(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         VirtualUserIndex;                                  // 0x02B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PointerIndex;                                      // 0x02B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECollisionChannel                             TraceChannel;                                      // 0x02B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B9[0x3];                                      // 0x02B9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InteractionDistance;                               // 0x02BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInteractionSource                      InteractionSource;                                 // 0x02C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableHitTesting;                                 // 0x02C1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowDebug;                                        // 0x02C2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C3[0x1];                                      // 0x02C3(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           DebugColor;                                        // 0x02C4(0x0010)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D4[0x7C];                                     // 0x02D4(0x007C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             CustomHitResult;                                   // 0x0350(0x0088)(Transient, IsPlainOldData, NoDestructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	struct FVector2D                              LocalHitLocation;                                  // 0x03D8(0x0008)(Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector2D                              LastLocalHitLocation;                              // 0x03E0(0x0008)(Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetComponent*                       HoveredWidgetComponent;                            // 0x03E8(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FHitResult                             LastHitResult;                                     // 0x03F0(0x0088)(Transient, IsPlainOldData, NoDestructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	bool                                          bIsHoveredWidgetInteractable;                      // 0x0478(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsHoveredWidgetFocusable;                         // 0x0479(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsHoveredWidgetHitTestVisible;                    // 0x047A(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_47B[0x5];                                      // 0x047B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool PressAndReleaseKey(const struct FKey& Key);
	bool PressKey(const struct FKey& Key, bool bRepeat);
	void PressPointerKey(const struct FKey& Key);
	bool ReleaseKey(const struct FKey& Key);
	void ReleasePointerKey(const struct FKey& Key);
	void ScrollWheel(float ScrollDelta);
	bool SendKeyChar(const class FString& Characters, bool bRepeat);
	void SetCustomHitResult(const struct FHitResult& HitResult);

	struct FVector2D Get2DHitLocation() const;
	class UWidgetComponent* GetHoveredWidgetComponent() const;
	const struct FHitResult GetLastHitResult() const;
	bool IsOverFocusableWidget() const;
	bool IsOverHitTestVisibleWidget() const;
	bool IsOverInteractableWidget() const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("WidgetInteractionComponent")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"WidgetInteractionComponent")
	}
	static class UWidgetInteractionComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWidgetInteractionComponent>();
	}
};
DUMPER7_ASSERTS_UWidgetInteractionComponent;

// Class UMG.WidgetNavigation
// 0x0090 (0x00B8 - 0x0028)
class UWidgetNavigation final : public UObject
{
public:
	struct FWidgetNavigationData                  Up;                                                // 0x0028(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FWidgetNavigationData                  Down;                                              // 0x0040(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FWidgetNavigationData                  Left;                                              // 0x0058(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FWidgetNavigationData                  Right;                                             // 0x0070(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FWidgetNavigationData                  Next;                                              // 0x0088(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FWidgetNavigationData                  Previous;                                          // 0x00A0(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("WidgetNavigation")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"WidgetNavigation")
	}
	static class UWidgetNavigation* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWidgetNavigation>();
	}
};
DUMPER7_ASSERTS_UWidgetNavigation;

// Class UMG.WidgetTree
// 0x0018 (0x0040 - 0x0028)
class UWidgetTree final : public UObject
{
public:
	class UWidget*                                RootWidget;                                        // 0x0028(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UWidget*>                        AllWidgets;                                        // 0x0030(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("WidgetTree")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"WidgetTree")
	}
	static class UWidgetTree* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWidgetTree>();
	}
};
DUMPER7_ASSERTS_UWidgetTree;

}

